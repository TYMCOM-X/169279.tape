:
:
: PATCH FOR BSC XOSTR TRACE VERSION 3.01. 
:
: THIS IS A REVESRION OF KJL'S VERSION 2.02 PATCH.
: TO ENABLE THIS PATCH, BSC AND DDTDIA SHOULD BE DEFINED.
: HELP DDT COMMAND WILL SHOW 'OS' AND 'SNAP' IS REMOVED OUT
: FROM HEL LIST. CURRENTLY, SNAP IS NOT WORKING AND WILL CRASH
: THE SLOT WITH VERSION 3.01. SO, SNAP IS REMOVED FROM THE HELP LIST.
:  NOTE: 'SNAP' ROUTINE IS STILL IN THE CODE, THE ISSUE
: OF '::GO SNAP' WILL FORCE THE SNAP ROUTINE TO BE EXECUTED AND
: THEN CRASH THE SLOT. ANOTHER PATCH CAN BE USED TO AVOID THE 
: ENTENDED DDT COMMANDS-REDO,DYM1,DYM2,SNAP CRASH---
: EXTDDT.301 IN JWANG:37:33.
: 
: THIS PATCH WILL ALLOW USER TO USE 'OS' OR 'GO XOSTR' COMMANDS FOR
: BSC X.25 LINK.
:
: TASK: 1. CHANGE THE HELP LIST---REMOVE SNAP AND ADD OS.
:       2. CHANGE CMDLST TABLE----REMOVE SNAP AND ADD OS.
:       3. ADD THE NEW ROUTINE XOSTR FOR BSC IN PATCH1 AREA.
:          SNAP ROUTINE IS STILL IN THE CODE.

   IF    BSC
   IF    DDTDIA
PATCH(860915,1100,JWANG,DDMMY1-16,,6)
        SVC     0B,M.121,,      :OUTPUT 'OS' MESSAGE INSTEAD OF 'SNAP'
CONPATCH(PA0PTR,,1C)
M.121   SC      /"8A"8DOS    Output sector trace/
CONPATCH(DDMMY2+4+0E0,,8)       :CMDLST TABLE
        WC      XOSTR           :XOSTR IS DEFINED IN THIS PATCH
        WC      0CFD30000       :OS IN HEX
::: REMOVE THIS LINE  PATCH(840727,1200,KJL,XDBA00,,6)
::: REMOVE THIS LINE  	J	PA1PTR,,	:INVOKE THIS PATCH.
CONPATCH(PA1PTR,,1CE)    :::CONPATCH(PA1PTR,,2E)
:	OUTPUT SECTOR TRACE TABLE
XOSTR	LHI	R2,NLINES-1
XOST00	LB	R1,CURSEC,R2,	:GET CURRENT POINTER
	AIS	R1,1		:POINT TO NEXT ENTRY
	CLB	R1,K.LT,R2,	:END OF TABLE FOR THIS LINE?
	JLFS	XOST01		:IF NOT
	LIS	R1,0		:POINT TO BEGINNING OF TABLE
XOST01	STB	R1,P.PTR,R2,	:INIT TRACE POINTER TO ONE AFTER CURRENT
	SIS	R2,1		:BUMP POINTER
	JGEBS	XOST00		:IF MORE TO DO

	LIS	R1,0
	STB	R1,MSGSPC,,	:INIT STORE BYTE COUNT

	JAL	R13,XDTIME,,	:ASK FOR DUMP TIME

:::      IF	.EQ.(NLINES,1)
:::   CONPATCH(PA1PTR,,4)
	LHI	R14,100		:FOR SINGLE LINE, NO "LINE NUMBER?" PROMPT
:::      ELSE
:::CONPATCH(PA1PTR,,28)
:::	LIS	R14,0		:INIT LINE NUMBER
:::	SVC	0B,M.LINQ,,	:ASK FOR LINE NUMBER
:::XOST10	SVC	0A,0010		:WAIT FOR RESPONSE
:::	JFS	XOST20		:IF NO MORE CHARACTERS
:::	NHI	R0,7F		:STRIP PARITY
:::	CLHI	R0,0D		:CR?
:::	JE	XOST20		:IF SO
:::	OHI	R14,100		:INDICATE THAT RESPONSE NOT JUST CR
:::	NHI	R0,0F		:JUST GET LAST DIGIT
:::	SLLS	R14,0		:MOVE ACCUMULATION OVER A DIGIT
:::	OR	R14,R0		:INSERT NEW DIGIT
:::	JBS	XOST10		:GO BACK FOR MORE
:::   EI	NLINES

:::CONPATCH(PA1PTR,,19C)
XOST20	LR	R14,R14		:LOOK AT LINE NUMBER
	JE	XOSM		:IF NOTHING, GO DO ALL LINES

XOSS	NHI	R14,1F		:REDUCE LINE MOD 32
	CLHI	R14,NLINES	:LINE NUMBER TOO BIG?
	JGE	XOSS99		:IF SO, GET OUT
	LHL	R15,SECBIA,R14,R14	:GET SECTOR BIAS
	SLLS	R15,2		:CONVERT WORD INDEX TO BYTE INDEX

XOSS10	JAL	R13,XOSLP	:GO PRINT SECTORS FOR LINE
	L	R0,XDRSEC,,	:SLOWC TIME TO QUIT
	CL	R0,SLOWC,,	:TIME YET ??
	JLFS	XOSS99		:YES, END OF TRACE TIME
	SVC	DISMIS,0	:DISMISS TO DDT
	JBS	XOSS10		:GO LOOK FOR ANOTHER PACKET
XOSS99	J	PBT99,,		:RETURN TO COMMAND PROCESSOR
:  FOR THE RETURN TO COMMAND PROCESSOR, USE THE SAME EXIT AS PBT99,
:  TO KEEP THIS PATCH COMPATIBLE WITH VERSION 2.01 AND 2.02.
:  FOR 2.01 USE "LM R0,XRSAVE,," AND "SVC KIO,1".
:  FOR 2.02 USE "J DSTRT2".

XOSM	LIS	R14,0		:INIT LINE NUMBER
XOSM10	LIS	R13,0
	STB	R13,MSGSPC,,	:INIT MESSAGE SPACE
	LA	R9,M.LINE,,	:POINT TO LINE MESSAGE
	JAL	R12,MSGMOV,,	:MOVE TO STORE
	LIS	R1,2		:SET FIELD WIDTH TO 2
	LR	R5,R14		:GET LINE NUMBER
	JAL	R11,NUMMOV,,	:MOVE TO STORE
	LA	R9,M.EMPT,,	:POINT TO EMPTY SPACE
	JAL	R12,MSGMOV,,	:MOVE TO STORE
	LHL	R15,SECBIA,R14,R14,	:GET SECTOR BIAS
	SLLS	R15,2		:CONVERT WORD INDEX TO BYTE INDEX
	JAL	R13,XOSLP	:GO PRINT SECTOR
	AIS	R14,1		:BUMP LINE NUMBER
	CLHI	R14,NLINES	:LINE NUMBER TOO BIG?
	JL	XOSM10		:GO ON

XOSM98	L	R0,XDRSEC,,	:SLOWC TIME TO QUIT
	CL	R0,SLOWC,,	:TIME YET ??
	JLFS	XOSM99		:YES, END OF TRACE TIME
	SVC	DISMIS,0	:DISMISS TO DDT
	J	XOSM		:GO LOOK FOR ANOTHER PACKET
XOSM99	J	PBT99,,		:RETURN TO COMMAND PROCESSOR
:  FOR THE RETURN TO COMMAND PROCESSOR, USE THE SAME EXIT AS PBT99.

:	SUBROUTINE TO GET SECTOR AND PRINT IT
:	R13 = LINK REGISTER
:	R14 = LINE NUMBER
:	R15 = SECTOR BIAS
:
:	REGISTER USAGE:
:	R2  = INPUT BUFFER ADDRESS OF PACKET TO BE DISPLAYED.
:	R5  = HOLDS THE BYTE CURRENTLY BEING PROCESSED.
:	R6  = TRACE BUFFER POINTER INTO P.PTR.
:	R7  = COUNT OF REMAINING BYTES OF DATA IN INPUT BUFFER.  ONLY UPDATED
:		WHEN A BYTE IS ACTUALLY OUTPUTTED TOWARD THE TERMINAL.
:	R8  = OFFSET INTO INPUT BUFFER FOR NEXT BYTE TO PROCESS.
:	
:	
XOSLP	HS
XOSL10	LB	R6,P.PTR,R14,	:OUR TRACE PTR
XOSL30	CLB	R6,CURSEC,R14,	:SAME AS INTERFACE ??
	JE	XOSL98		:IF PACKET BUFFER TRACE CAUGHT UP
	LR	R7,R6		:GET POINTER
	SLLS	R7,2		:CONVERT WORD INDEX TO BYTE INDEX
	L	R2,SECADR,R7,R15	:GET ADDRESS OF BUFFER
:  BEGIN SPECIAL CODE FOR BISYNC PACKET DISPLAY.
	LIS	R7,0F		:GET BYTE COUNT OF 0F HEX.  IF DO NOT FIND 
				:DLE STX IN 1ST 15 BYTES, ASSUME EMPTY BUFFER.
	LIS	R8,0		:INIT BYTE POSITION POINTER (INTO PACKET BUF).
:  BEGIN SCAN FOR DLE STX, WHICH MARKS THE BEGINNING OF THE BISYNC FRAME.
XOSL35	JAL	R11,XOSL45	:GET A BYTE FROM THE BUFFER, INTO R5.
	CHI	R5,08		:TEST FOR DLE (REVERSED).
	JNBS	XOSL35		:IF NOT DLE REPEAT SCAN TILL USE UP R7 COUNT.
:  DLE FOUND.  GO CHECK IF NEXT CHAR IS STX.
	JAL	R11,XOSL45	:GET A BYTE FROM THE BUFFER, INTO R5.
	CHI	R5,40		:TEST FOR STX (REVERSED).
	JNBS	XOSL35		:IF NOT DLE STX, CONTINUE THE SCAN.
:  FLUSH FRAME HEADERS, SO ONLY THE PACKET LEVEL IS DISPLAYED.  FLUSH ADDRESS:
	JAL	R11,XOSL45	:GET A BYTE FROM THE BUFFER, INTO R5.
	CHI	R5,08		:ENSURE IT IS NOT A DLE (REVERSED).
	JNFS	XOSL40		:IF NOT, PROCESS FRAME TYPE
	JAL	R11,XOSL45	:GET A BYTE FROM THE BUFFER, INTO R5.
:  FLUSH FRAME TYPE:
XOSL40	JAL	R11,XOSL45	:GET A BYTE FROM THE BUFFER, INTO R5.
	CHI	R5,08		:ENSURE IT IS NOT A DLE (REVERSED).
	JNFS	XOSL50		:IF NOT, CAN FINALLY PROCESS THE PACKET.
	JAL	R11,XOSL45	:GET A BYTE FROM THE BUFFER, INTO R5.
	JFS	XOSL50		:GO PROCESS THE PACKET.
:  ROUTINE TO GET A BYTE FROM THE PACKET BUFFER.  IF THE R7 COUNT IS USED
:  UP, BRANCH TO XOSL70 TO ABORT SCANNING THIS PACKET.
:	R2 = ADDRESS OF PACKET INPUT BUFFER.
:	R7 = COUNT OF BYTES REMAINING BEFORE QUIT RETRIEVAL.
:	R8 = INDEX INTO PACKET INPUT BUFFER.
:	R11= LINK REGISTER
:	R5 = BYTE VALUE RETURNED IN THIS REGISTER.
XOSL45	LB	R5,0,R2,R8	:GET BYTE FROM PACKET, INTO R5.
	AIS	R8,1		:INCREMENT INDEX INTO INPUT BUFFER.
	SIS	R7,1		:DECREMENT COUNT OF BYTES REMAINING.
	JE	XOSL70		:IF ZERO, QUIT--GO CHECK NEXT PACKET.
	JR	R11		:ELSE RETURN, TO PROCESS THE BYTE.
:  PROCESS PACKET LEVEL (DISPLAY TILL DLE ETX, OR GET MAX PACKET SIZE).
XOSL50	LH	R7,MST.LT,R14,R14	:LOAD MAX PKT SIZE AS COUNTER LIMIT.
	AHI	R7,10		:ALLOW 16 BYTES EXTRA FOR PACKET HEADER.
:(NOTE R7 MUST START AS MULTIPLE OF 16 FOR PROPER INITIAL OUTPUT FORMAT.)
XOSL52	LB	R5,0,R2,R8	:GET A BYTE FROM THE INPUT PACKET BUFFER.
	AIS	R8,1		:INCREMENT INDEX INTO BUFFER.
	CHI	R5,08		:CHECK FOR DLE (REVERSED).
	JNFS	XOSL55		:IF NOT DLE, GO TO DISPLAY IT.
	LB	R5,0,R2,R8	:GET A BYTE FROM THE INPUT PACKET BUFFER.
	AIS	R8,1		:INCREMENT INDEX INTO BUFFER.
	CHI	R5,08		:CHECK FOR DLE (REVERSED).
	JN	XOSL65		:IF NOT DLE, ASSUME IT IS ETX, OUTPUT, ABORT.
				:IF DLE TWICE IN DATA, GO TO DISPLAY IT ONCE.
:  GOT A DATA BYTE TO OUTPUT.  FORMAT IT AND PUT INTO MSGSPC OUTPUT BUFFER.
XOSL55	LB	R5,TCHINV,R5,	:NEED TO DO BIT REVERSAL BEFORE DISPLAY.
	LIS	R1,2		:INIT FIELD WIDTH FOR NUMBER CONVERSION
	JAL	R11,NUMMOV,,	:CONVERT AND PRINT
	SIS	R7,1		:DECREMENT BYTE COUNTER OF BYTES LEFT.
	JE	XOSL65		:IF COUNTER EXPIRED OUTPUT DATA AND ABORT PKT.
	LR	R3,R7		:SEE IF NEED CR
	NHI	R3,0F		:IF MULTIPLE OF 16, INSERT CRLF.
	JNFS	XOSL60		:IF NOT, GO TEST IF SPACE SHOULD BE OUTPUTTED.
	LA	R9,M.CRLF,,	:POINT TO CRLF
	JAL	R12,MSGMOV,,	:MOVE TO STORE
	SVC	0B,MSGSPC,,	:OUTPUT THE LINE TO THE TERMINAL.
	LIS	R3,0		:ZERO OUT BYTE COUNT.
	STB	R3,MSGSPC,,	:ZERO OUT BYTE COUNT IN MSGSPC.
XOSL60	NHI	R3,1		:ODD OR EVEN BYTE?
	JN	XOSL52		:IF NOT EVEN GO TO BEGINNING TO GET NEXT BYTE.
	LHI	R5,0A0		:GET SPACE CHARACTER, INSERTED EVERY 2 BYTES.
	JAL	R11,BYTMOV,,	:MOVE TO STORE
	J	XOSL52		:GO TO BEGINNING OF LOOP TO GET NEXT BYTE.
:  DONE WITH PACKET.  SEND THE FINAL LINE OF OUTPUT TO THE TERMINAL.
XOSL65	LA	R9,M.CRLF,,	:END WITH CRLF
	JAL	R12,MSGMOV,,	:MOVE TO STORE
	SVC	0B,MSGSPC,,	:PRINT INTERPRETATION
	LIS	R7,0		:ZERO OUT LENGTH REMAINING.
	STB	R7,MSGSPC,,	:RESET MESSAGE LENGTH
:  CHECK FOR OTHER PACKETS FOR THIS LINE BEFORE RETURNING.
XOSL70	AIS	R6,1		:ADVANCE OUR PTR
	CLB	R6,K.LT,R14,	:END OF TRACE TABLE ??
	JLFS	XOSL80		:IF NOT
	LIS	R6,0		:WRAP TO START
XOSL80	STB	R6,P.PTR,R14,	:SAVE OUR UPDATED PTR
	J	XOSL30		:START NEW PACKET ENTRY

XOSL98	JR	R13		:RETURN

ENDPATCH(MAKE XOSTR AVAILABLE ON BSC LINK)
   EI DDTDIA
   EI BSC
   