










	*************************************************
	*						*
	*	XMODEM ASYNC TRANSMISSION PROTOCOL	*
	*						*
	*************************************************


	PROTOCOL SPECIFICATIONS AND PROGRAMING TIPS
	WITH OVERVIEW END.

	25-OCT-85

TABLE OF CONTENTS
1. DEFINITIONS
2. TRANSMISSION MEDIUM LEVEL PROTOCOL
3. MESSAGE BLOCK LEVEL PROTOCOL
4. FILE LEVEL PROTOCOL
5. DATA FLOW EXAMPLE INCLUDING ERROR RECOVERY
6. PROGRAMMING TIPS.

-------- 1. DEFINITIONS.
<SOH>   01H
<EOT>   04H
<ACK>   05H
<NAK>   15H
<CAN>   18H

-------- 2. TRANSMISSION MEDIUM LEVEL PROTOCOL
ASYNCHRONOUS, 8 DATA BITS, NO PARITY, ONE STOP BIT.

    THE PROTOCOL IMPOSES NO RESTRICTIONS ON THE CONTENTS OF THE
DATA BEING TRANSMITTED.  NO CONTROL CHARACTERS ARE LOOKED FOR
IN THE 128-BYTE DATA MESSAGES.  ABSOLUTELY ANY KIND OF DATA MAY
BE SENT - BINARY, ASCII, ETC.  THE PROTOCOL HAS NOT FORMALLY
BEEN ADOPTED TO A 7-BIT ENVIRONMENT FOR THE TRANSMISSION OF
ASCII-ONLY (OR UNPACKED-HEX) DATA , ALTHOUGH IT COULD BE SIMPLY
BY HAVING BOTH ENDS AGREE TO AND THE PROTOCOL-DEPENDENT DATA
WITH 7F HEX BEFORE VALIDATING IT.  I SPECIFICALLY AM REFERRING
TO THE CHECKSUM, AND THE BLOCK NUMBERS AND THEIR ONES-
COMPLEMENT.
    THOSE WISHING TO MAINTAIN COMPATIBILITY OF THE CP/M FILE
STRUCTURE, I.E. TO ALLOW MODEMMING ASCII FILES TO OR FROM CP/M
SYSTEMS SHOULD FOLLOW THIS DATA FORMAT:
  * ASCII TABS USED (09H); TABS SET EVERY 8.
  * LINES TERMINATED BY CR/LF (0DH 0AH)
  * END-OF-FILE INDICATED BY ^Z, 1AH.  (ONE OR MORE)
  * DATA IS VARIABLE LENGTH, I.E. SHOULD BE CONSIDERED A
    CONTINUOUS STREAM OF DATA BYTES, BROKEN INTO 128-BYTE
    CHUNKS PURELY FOR THE PURPOSE OF TRANSMISSION.
  * A CP/M "PECULIARITY": IF THE DATA ENDS EXACTLY ON A
    128-BYTE BOUNDARY, I.E. CR IN 127, AND LF IN 128, A
    SUBSEQUENT SECTOR CONTAINING THE ^Z EOF CHARACTER(S)
    IS OPTIONAL, BUT IS PREFERRED.  SOME UTILITIES OR
    USER PROGRAMS STILL DO NOT HANDLE EOF WITHOUT ^ZS.
  * THE LAST BLOCK SENT IS NO DIFFERENT FROM OTHERS, I.E.
    THERE IS NO "SHORT BLOCK".

-------- 3. MESSAGE BLOCK LEVEL PROTOCOL
 EACH BLOCK OF THE TRANSFER LOOKS LIKE:
<SOH><BLK #><255-BLK #><--128 DATA BYTES--><CKSUM>
    IN WHICH:
<SOH>       = 01 HEX
<BLK #>     = BINARY NUMBER, STARTS AT 01 INCREMENTS BY 1, AND
              WRAPS 0FFH TO 00H (NOT TO 01)
<255-BLK #> = BLK # AFTER GOING THRU 8080 "CMA" INSTR, I.E.
              EACH BIT COMPLEMENTED IN THE 8-BIT BLOCK NUMBER.
              FORMALLY, THIS IS THE "ONES COMPLEMENT".
<CKSUM>     = THE SUM OF THE DATA BYTES ONLY.  TOSS ANY CARRY.

-------- 4. FILE LEVEL PROTOCOL

---- 4A. COMMON TO BOTH SENDER AND RECEIVER:

    ALL ERRORS ARE RETRIED 10 TIMES.  FOR VERSIONS RUNNING WITH
AN OPERATOR (I.E. NOT WITH XMODEM), A MESSAGE IS TYPED AFTER 10
ERRORS ASKING THE OPERATOR WHETHER TO "RETRY OR QUIT".
    SOME VERSIONS OF THE PROTOCOL USE <CAN>, ASCII ^X, TO
CANCEL TRANSMISSION.  THIS WAS NEVER ADOPTED AS A STANDARD, AS
HAVING A SINGLE "ABORT" CHARACTER MAKES THE TRANSMISSION
SUSCEPTIBLE TO FALSE TERMINATION DUE TO AN <ACK> <NAK> OR <SOH>
BEING CORRUPTED INTO A <CAN> AND CANCELING TRANSMISSION.
    THE PROTOCOL MAY BE CONSIDERED "RECEIVER DRIVEN", THAT IS,
THE SENDER NEED NOT AUTOMATICALLY RE-TRANSMIT, ALTHOUGH IT DOES
IN THE CURRENT IMPLEMENTATIONS.

---- 4B. RECEIVE PROGRAM CONSIDERATIONS:
    THE RECEIVER HAS A 10-SECOND TIMEOUT.  IT SENDS A <NAK>
EVERY TIME IT TIMES OUT.  THE RECEIVER'S FIRST TIMEOUT, WHICH
SENDS A <NAK>, SIGNALS THE TRANSMITTER TO START.  OPTIONALLY,
THE RECEIVER COULD SEND A <NAK> IMMEDIATELY, IN CASE THE SENDER
WAS READY.  THIS WOULD SAVE THE INITIAL 10 SECOND TIMEOUT.
HOWEVER, THE RECEIVER MUST CONTINUE TO TIMEOUT EVERY 10 SECONDS
IN CASE THE SENDER WASN'T READY.
    ONCE INTO A RECEIVING A BLOCK, THE RECEIVER GOES INTO A
ONE-SECOND TIMEOUT FOR EACH CHARACTER AND THE CHECKSUM.  IF THE
RECEIVER WISHES TO <NAK> A BLOCK FOR ANY REASON (INVALID
HEADER, TIMEOUT RECEIVING DATA), IT MUST WAIT FOR THE LINE TO
CLEAR.  SEE "PROGRAMMING TIPS" FOR IDEAS
    SYNCHRONIZING:  IF A VALID BLOCK NUMBER IS RECEIVED, IT
WILL BE: 1) THE EXPECTED ONE, IN WHICH CASE EVERYTHING IS FINE;
OR 2) A REPEAT OF THE PREVIOUSLY RECEIVED BLOCK.  THIS SHOULD
BE CONSIDERED OK, AND ONLY INDICATES THAT THE RECEIVERS <ACK>
GOT GLITCHED, AND THE SENDER RE-TRANSMITTED; 3) ANY OTHER BLOCK
NUMBER INDICATES A FATAL LOSS OF SYNCHRONIZATION, SUCH AS THE
RARE CASE OF THE SENDER GETTING A LINE-GLITCH THAT LOOKED LIKE
AN <ACK>.  ABORT THE TRANSMISSION, SENDING A <CAN>

---- 4C. SENDING PROGRAM CONSIDERATIONS.

    WHILE WAITING FOR TRANSMISSION TO BEGIN, THE SENDER HAS
ONLY A SINGLE VERY LONG TIMEOUT, SAY ONE MINUTE.  IN THE
CURRENT PROTOCOL, THE SENDER HAS A 10 SECOND TIMEOUT BEFORE
RETRYING.  I SUGGEST NOT DOING THIS, AND LETTING THE PROTOCOL
BE COMPLETELY RECEIVER-DRIVEN.  THIS WILL BE COMPATIBLE WITH
EXISTING PROGRAMS.
    WHEN THE SENDER HAS NO MORE DATA, IT SENDS AN <EOT>, AND
AWAITS AN <ACK>, RESENDING THE <EOT> IF IT DOESN'T GET ONE.
AGAIN, THE PROTOCOL COULD BE RECEIVER-DRIVEN, WITH THE SENDER
ONLY HAVING THE HIGH-LEVEL 1-MINUTE TIMEOUT TO ABORT.


-------- 5. DATA FLOW EXAMPLE INCLUDING ERROR RECOVERY

HERE IS A SAMPLE OF THE DATA FLOW, SENDING A 3-BLOCK MESSAGE.
IT INCLUDES THE TWO MOST COMMON LINE HITS - A GARBAGED BLOCK,
AND AN <ACK> REPLY GETTING GARBAGED.  <XX> REPRESENTS THE
CHECKSUM BYTE.

SENDER                                  RECEIVER
                                TIMES OUT AFTER 10 SECONDS,
                        <---            <NAK>
<SOH> 01 FE -DATA- <XX> --->
                        <---            <ACK>
<SOH> 02 FD -DATA- XX   --->    (DATA GETS LINE HIT)
                        <---            <NAK>
<SOH> 02 FD -DATA- XX   --->
                        <---            <ACK>
<SOH> 03 FC -DATA- XX   --->
   (ACK GETS GARBAGED)  <---            <ACK>
<SOH> 03 FC -DATA- XX   --->            <ACK>
<EOT>                   --->
                        <---            <ACK>

-------- 6. PROGRAMMING TIPS.

* THE CHARACTER-RECEIVE SUBROUTINE SHOULD BE CALLED WITH A
PARAMETER SPECIFYING THE NUMBER OF SECONDS TO WAIT.  THE
RECEIVER SHOULD FIRST CALL IT WITH A TIME OF 10, THEN <NAK> AND
TRY AGAIN, 10 TIMES.
  AFTER RECEIVING THE <SOH>, THE RECEIVER SHOULD CALL THE
CHARACTER RECEIVE SUBROUTINE WITH A 1-SECOND TIMEOUT, FOR THE
REMAINDER OF THE MESSAGE AND THE <CKSUM>.  SINCE THEY ARE SENT
AS A CONTINUOUS STREAM, TIMING OUT OF THIS IMPLIES A SERIOUS
LIKE GLITCH THAT CAUSED, SAY, 127 CHARACTERS TO BE SEEN INSTEAD
OF 128.

* WHEN THE RECEIVER WISHES TO <NAK>, IT SHOULD CALL A "PURGE"
SUBROUTINE, TO WAIT FOR THE LINE TO CLEAR.  RECALL THE SENDER
TOSSES ANY CHARACTERS IN ITS UART BUFFER IMMEDIATELY UPON
COMPLETING SENDING A BLOCK, TO ENSURE NO GLITCHES WERE MIS-
INTERPRETED.
  THE MOST COMMON TECHNIQUE IS FOR "PURGE" TO CALL THE
CHARACTER RECEIVE SUBROUTINE, SPECIFYING A 1-SECOND TIMEOUT,
AND LOOPING BACK TO PURGE UNTIL A TIMEOUT OCCURS.  THE <NAK> IS
THEN SENT, ENSURING THE OTHER END WILL SEE IT.

* YOU MAY WISH TO ADD CODE RECOMMENDED BY JONH MAHR TO YOUR
CHARACTER RECEIVE ROUTINE - TO SET AN ERROR FLAG IF THE UART
SHOWS FRAMING ERROR, OR OVERRUN.  THIS WILL HELP CATCH A FEW
MORE GLITCHES - THE MOST COMMON OF WHICH IS A HIT IN THE HIGH
BITS OF THE BYTE IN TWO CONSECUTIVE BYTES.  THE <CKSUM> COMES
OUT OK SINCE COUNTING IN 1-BYTE PRODUCES THE SAME RESULT OF
ADDING 80H + 80H AS WITH ADDING 00H + 00H.




               MODEM/XMODEM PROTOCOL EXPLAINED

                            BY

                KELLY SMITH, CP/M-NET "SYSOP"

                      JANUARY 8,1980
 

 I  THOUGHT THAT IT MAY BE OF SOME INTEREST TO THOSE OF  YOU 
THAT  USE  THE MODEM/XMODEM FILE TRANSFER CAPABILITY OF  THE 
CP/M-NET,  TO GET A LITTLE INSIGHT AS TO THE  COMMUNICATIONS 
PROTOCOL  (I.E.  "HANDSHAKING  METHOD") USED BY THE  SYSTEM. 

 HEREIN  LIES THE DETAILS OF A VERY GOOD (NOT PERFECT)  DATA 
COMMUNICATIONS  PROTOCOL  THAT  HAS BECOME  THE  "DE  FACTO" 
STANDARD  FOR VARIOUS REMOTE CP/M SYSTEMS (RCPM'S) THAT  ARE 
ACCESSIBLE ACROSS THE COUNTRY (REFER TO RCPMLST4.DOC ON  ALL 
RCPM'S  FOR ACCESS NUMBERS AND NOTE THAT THE "DIGIT  NUMBER" 
IN THAT LIST CHANGES AS NEW SYSTEM ARE LISTED).  I ALSO WISH 
TO GIVE CREDIT TO WARD CHRISTENSEN (THE "ORIGINAL" CBBS) FOR 
WRITING  MODEM.ASM (CPMUG VOLUME 25.11) AND KEITH  PETERSEN, 
BRUCE RATOFF, DAVE HARDY, ROD HART, TOM "C" (WE KNOW WHO YOU 
ARE TOM!),  AND OTHERS,  FOR ENHANCEMENTS TO WARD'S ORIGINAL 
PROGRAM THAT WE NOW CALL XMODEM (EXTERNAL MODEM).

 DATA IS SENT IN 128 BYTE BLOCKS WITH SEQUENTIALLY  NUMBERED 
BLOCKS, AND APPENDED BY A SINGLE CHECKSUM AT THE END OF EACH 
BLOCK. AS THE RECEIVING COMPUTER ACQUIRES THE INCOMING DATA, 
IT  PERFORMS IT'S OWN CHECKSUM AND UPON EACH COMPLETION OF A 
BLOCK,  IT  COMPARES IT'S CHECKSUM RESULT WITH THAT  OF  THE 
SENDING  COMPUTERS.  IF  THE RECEIVING COMPUTER MATCHES  THE 
CHECKSUM OF THE SENDING COMPUTER, IT TRANSMITS AN ACK (ASCII 
CODE PROTOCOL CHARACTER FOR ACKNOWLEDGE (04 HEX, CONTROL-F)) 
BACK TO THE SENDING COMPUTER.  THE ACK THEREFORE MEANS "ALLS 
WELL  ON  THIS  END,  SEND  SOME  MORE...".  NOTICE  IN  THE 
FOLLOWING EXAMPLE,  THAT THE SENDING COMPUTER WILL  TRANSMIT 
AN  "INITIAL  NAK"  (ASCII PROTOCOL CHARACTER  FOR  NEGATIVE 
ACKNOWLEDGE (15 HEX,  CONTROL-U))...OR,  "THAT WASN'T  QUITE 
RIGHT, PLEASE SEND AGAIN". DUE TO THE ASYNCHRONOUS NATURE OF 
THE  INITIAL  "HOOK-UP"  BETWEEN  THE  TWO  COMPUTERS,   THE 
RECEIVING  COMPUTER  WILL "TIME-OUT" LOOKING FOR  DATA,  AND 
SEND THE NAK AS THE "CUE" FOR THE SENDING COMPUTER TO  BEGIN 
TRANSMISSION. THE  SENDING COMPUTER KNOWS THAT THE RECEIVING 
COMPUTER  WILL  "TIME-OUT",  AND USES THIS FACT TO  "GET  IN 
SYNC"...THE  SENDING COMPUTER RESPONDS TO THE "INITIAL  NAK" 
WITH  A  SOH  (ASCII CODE PROTOCOL CHARACTER  FOR  START  OF 
HEADING (01 HEX,  CONTROL-A)), SENDS THE FIRST BLOCK NUMBER, 
SENDS THE 2' COMPLEMENT OF THE BLOCK NUMBER (VERY IMPORTANT, 
I WILL DISCUSS THIS LATER...), SENDS 128 BYTES OF 8 BIT DATA 
(THATS  WHY  WE CAN TRANSFER ".COM" FILES),  AND  FINALLY  A 
CHECKSUM,  WHERE  THE CHECKSUM IS CALCULATED BY SUMMING  THE 
SOH,  THE BLOCK NUMBER, THE BLOCK NUMBER 2'S COMPLEMENT, AND 
THE 128 BYTES OF DATA.

RECEIVING COMPUTER:

----/NAK/------------------------/ACK/----------------------
     15H                          06H 

SENDING COMPUTER:

--------/SOH/BLK#/BLK#/DATA/CSUM/---/SOH/BLK#/BLK#/DATA/ETC.
         01H 001H 0FEH 8BIT 8BIT     01H 002H 0FDH 8BIT ....  

 THIS  PROCESS CONTINUES,  WITH THE NEXT 128 BYTES,  IF  THE 
BLOCK  WAS ACK'ED BY THE RECEIVING COMPUTER,  AND  THEN  THE 
NEXT SEQUENTIAL BLOCK NUMBER AND IT'S 2'S COMPLEMENT, ETC.

 BUT  WHAT  HAPPENS  IF THE  BLOCK  IS  NAK'ED?...EASY,  THE 
SENDING COMPUTER JUST RE-SENDS THE PREVIOUS BLOCK.  NOW  THE 
HARD  PART...WHAT IF THE SENDING COMPUTER TRANSMITS A BLOCK, 
THE  RECEIVING COMPUTER GETS IT AND SENDS AN  ACK,  BUT  THE 
SENDER  DOES NOT SEE IT?...THE SENDING COMPUTER THINKS  THAT 
IT   HAS  FAILED  AND  AFTER  10  SECONDS  RE-TRANSMITS  THE 
BLOCK...ARGH!...THE  RECEIVING  COMPUTER HAS  "STASHED"  THE 
DATA  IN  MEMORY OR ON DISK (DATA IS WRITTEN TO  DISK  AFTER 
RECEIVING 16 BLOCKS),  THE RECEIVING COMPUTER IS NOW 1 BLOCK 
AHEAD OF THE TRANSMITING COMPUTER!  HERE COMES THE OPERATION 
OF THE BLOCK NUMBERS...THE RECEIVER DETECTS THAT THIS IS THE 
LAST  BLOCK  (ALL OVER AGAIN),  AND TRANSMITS BACK  AN  ACK, 
THROWS   AWAY   THE  BLOCK,   AND   (EFFECTIVELY)   "CATCHES 
UP"...CLEVER!  WHATS MORE, THE INTEGRITY OF THE BLOCK NUMBER 
IS VERIFIED BY THE RECEIVING COMPUTER, BECAUSE IT "SUMS" THE 
SOH  (01 HEX) WITH THE BLOCK NUMBER PLUS THE 2'S  COMPLEMENT 
OF  THE  BLOCK NUMBER),  AND THE RESULT MUST BE ZERO  FOR  A 
PROPER  TRANSFER  (E.G.  01+01+FE HEX =  00,  ON  THE  FIRST 
BLOCK). THE SEQUENCE OF EVENTS THEN, LOOKS LIKE THIS: 

RECEIVING COMPUTER:

----/ACK/-----------------------/NAK/-----------------------
     06H                         15H  

SENDING COMPUTER:

CSUM/---/SOH/BLK#/BLK#/DATA/CSUM/---/SOH/BLK#/BLK#/DATA/ETC.
8BIT     01H 003H 0FCH 8BIT 8BIT     01H 003H 0FCH 8BIT ....

 NORMAL COMPLETION OF DATA TRANSFERS WILL THEN CONCLUDE WITH 
AN  EOT (ASCII CODE PROTOCOL END OF  TRANSMISSION,  04  HEX, 
CONTROL-D)  FROM THE SENDING COMPUTER,  AND A FINAL ACK FROM 
THE  RECEIVING COMPUTER.  UNFORTUNATELY,  IF  THE  RECEIVING 
COMPUTER  MISSES THE EOT,  IT WILL CONTINUE TO WAIT FOR  THE 
NEXT BLOCK (SENDING NAK'S EVERY 10 SECONDS,  UP TO 10 TIMES) 
AND EVENTUALLY "TIME-OUT".  THIS IS RARELY THE CASE HOWEVER, 
AND  ALTHOUGH  NOT  "BULLET-PROOF",  IT IS A  VERY  WORKABLE 
PROTOCOL.

RECEIVING COMPUTER:

----/ACK/---/ACK/"TRANSFER COMPLETE"/A>(OR B>)
     06H     06H ................................

SENDING COMPUTER:

CSUM/---/EOT/---/A>(OR B>)
8BIT     04H .............

 IN   SOME  CASE,   WHERE  THE  TELEPHONE  TRANSMISSION   IS 
REPEATEDLY  "TRASHED" (WEAK SIGNALS,  MULTIPLE NOISE "HITS", 
ETC.),   THE  RECEIVING  COMPUTER  (AND  OPERATOR)  WILL  BE 
PROVIDED THE OPTION TO QUIT.  HERE,  THE OPERATOR ENTERS "R" 
OR  "Q" IN RESPONSE TO "RETRY OR QUIT?" (AFTER 10  RETRIES), 
AND  IF QUIT IS ENVOKED BY THE OPERATOR,  A CAN (ASCII  CODE 
PROTOCOL CANCEL, 18 HEX, CONTROL-X) IS SENT BY THE RECEIVING 
COMPUTER TO CANCEL THE ENTIRE TRANSFER SESSION (NOTE:  IS IS 
POSSIBLE   TO  "GARBLE"  AN  ACK  TO  A   CAN,   AND   ABORT 
PREMATURLEY):

RECEIVING COMPUTER:

----/NAK/...NAK'S TEN TIMES.../"RETRY OR QUIT?"(Q)/CAN/A>...
     15H                                           18H

SENDING COMPUTER:

CSUM/---/...GARBLED DATA....../-----------------------/A>...
8BIT

 A FINAL CONSIDERATIONS WHEN USING THE MODEM PROGRAM,  IS  A 
TIMING RELATED PROBLEMS WHEN TRANSFER STATUS MESSAGES AND/OR 
TEXTUAL  DATA IS DIRECTED TO THE SCREEN OF A SLOW (4800 BAUD 
OR LESS) TERMINAL OR TO A HARD COPY PRINTER. THIS PROBLEM IS 
READILY  APPARENT (MULTIPLE NAK'S) WHEN USING MODEM FOR  THE 
FIRST TIME, AND CAN USUALLY BE "CURED" BY NOT SPECIFYING THE 
"V"  (VIDEO)  SUB-OPTION WHEN SENDING  OR  RECEIVING  FILES. 
USERS  OF  LIFEBOAT  ASSOCIATES  BSTAM  ENCOUNTER  THE  SAME 
PROBLEM, BUT THIS IS EASILY FIXED WITH THE FILES TQPATCH.ASM 
AND  RQPATCH.ASM  (TRANSFER QUIET/RECEIVE QUIET) THAT  KEITH 
PETERSEN (ROYAL OAK CP/M,  "CALL-BACK" REMOTE SYSTEM, (313)-
588-7054)  WROTE TO SOLVE THE PROBLEM OF LOW SPEED  TERMINAL 
I/O.

 FOR USERS OF CBBS'S THAT DO NOT HAVE MODEM.ASM (BUT DO HAVE 
A  CP/M DISK SYSTEM...ESSENTIAL!),  LET ME SUGGEST THAT  YOU 
"DATA  CAPTURE" THE FILE MBOOT3.ASM FROM ONE OF  THE  RCPM'S 
(IT'S  A SMALL 8 KILO-BYTE FILE THAT "FITS" IN MOST SYSTEM'S 
MEMORY) TO GET THE LARGER MODEM.ASM (40  KILO-BYTES).  CHECK 
IT  VERY CAREFULLY FOR ERRORS USING THE "DATA CAPTURE" (READ 
ERROR  PRONE METHOD HERE).  THEN EDIT AND ASSEMBLE FOR  YOUR 
MODEM  CONFIGURATION.

 IF  YOU ARE TIRED OF BUYING SOFTWARE WHERE THE ADVERTISMENT 
IS WRITTEN BETTER THAN THE PROGRAM, THEN THE RCPM'S ARE JUST 
WHAT YOU HAVE BEEN LOOKING FOR...AND FREE!


<<<<< END OF FILE >>>>>

