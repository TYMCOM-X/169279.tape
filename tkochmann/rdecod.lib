	SUBTTL	ISIS RING INTERPETER
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::	ISIS RING INTERPERTER					::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:
LENGTH	EQ	0F0028
LP0LST	EQ	0F0026
NPORTS	EQ	0E0082

	LO	RING
	SEG	A.CODE
XDRSS1	HS	0

:	DUMP I/O RINGS
:
RR	EQ	8		:REGISTER ADDRESS OF RING
RS	EQ	9		:REGISTER RING SIZE

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::	START OF ?STAT COMMAND FOR ISIS RING INTERPETER		::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

DSTART	HS	0
XDRING	SVC	0B,XDRPLU	:+ PROMPT
	LIS	R0,0
	STH	R0,XDRWFL,,	:CLEAR WRAPPED FLAG
XDR001	SVC	0A,0010		:TTY INPUT INTO R0, 16 SEC TIMEOUT
	J	XDR001		:TIMEOUT, RETURN TO DDT
	NHI	R0,7F		:OFF THE PARITY
	JAL	R1,CAPIT	:CAPITALIZE IT
	CLHI	R0,57		:W ??
	JNFS	XDR004		:IF NOT
	STH	R0,XDRWFL	:ASSUME TO HAVE WRAPPED
	SVC	0A,0010		:GET NEXT CHARACTER
	J	XDRING		:TIMEOUT, EXIT
	JAL	R1,CAPIT	:CAPITALIZE IT 
XDR004	CHI	R0,49		:I ??
	JEFS	XDR020		:IF SO DO IRING
	CHI	R0,4F		:O ??
	JEFS	XDR030		:IF SO DO ORING
	SVC	KIO,1		:RETURN TO DDT
XDR020	LA	RR,IRING,,	:HANDLE IRING
	LHI	RS,IRSIZE	:RING SIZE
	JFS	XDR040
XDR030	LA	RR,ORING,,	:HANDLE ORING
	LHI	RS,ORSIZE	:RING SIZE
XDR040	LIS	R1,0		:CLEAR ACCUMULATOR
XDR050	SVC	0A,0008		:NEXT CHARACTER INTO R0
	J	XDR060		:TIMEOUT, CONTINUE
	NHI	R0,7F		:FORGET PARITY
	CLHI	R0,0D		:CR ??
	JE	XDR060		:DONE INPUTTING IF SO
	NHI	R0,0F		:REDUCE TO 0-F
	SLLS	R1,4		:POSITION ACCUMULATOR 
	OR	R1,R0		:ACCUMULATE ADDRESS
	J	XDR050
XDR060	A	R1,SLOWC,,	:ADD CURRENT TIME
	ST	R1,XDRSEC	:SAVE TIME TO QUIT
	LIS	R1,0		:ASSUME START AT BEG OF RING
	LH	R2,XDRWFL	:DO WE KNOW IT WRAPPED ??
	JE	XDR0A0		:IF NOT
	LH	R1,NFMI,RR	:USE OLDEST ENTRY
	SVC	0B,XDCRLF,,	:NEW LINE
	J	XDR0A4

:	"CONTINUE" AT NEXT MESSAGE
XDR090	AIS	R1,3		:ROUND UP TO FULL WORD
	NHI	R1,-4		:AND I.E., NEXT MESSAGE
	CR	R1,RS		:TO END OF RING ??
	JLFS	XDR0A0		:IF NOT
	SR	R1,RS		:FOLD TO START OF RING
XDR0A0	SVC	0B,XDCRLF,,	:CR LF
XDR0A2	CLH	R1,NFMI,RR	:CAUGHT UP ?
	JNFS	XDR0A4		:NOT YET
	L	R0,XDRSEC	:TIME TO END THIS 
	CL	R0,SLOWC,,	:COMPARE TO ENDING SECOND
	JL	XDRING		:YES, RETURN TO DDT
	SVC	DISMIS,0	:DISMISS A BIT
	JBS	XDR0A2		:WATCH FOR A CHANGE IN RING
XDR0A4	LB	R2,RING+2,R1,RR	:GET MESSAGE CODE
	LHL	R3,RING,R1,RR	:GET PORT #
	JE	XDR0C0		:IF INTRANODE MESSAGE
:	CHECK FOR A VALID PORT #, KEEP INCRIMENTING TIL FOUND
	CLH	R3,NPORTS,,	:TEST AGAINST MAX PORT #
	JLEFS	XDR0A5		:OK, CONTINUE
	AIS	R1,4		:MOVE TO NEXT POSSIBLE PORT
	JBS	XDR0A4		:LOOP LOOKING FOR A VALID PORT #
:	PORT NUMBER IS VALID
XDR0A5	LR	R2,R2		:CHECK FOR NEEDLE
	JE	XDR0F0		:IF SO
	CLHI	R2,9E		:DATA MESSAGE ??
	JLFS	XDR0B0		:IF SO
	SHI	R2,9E		:BIAS TO 0
	LA	R4,,R2,R2	:FOR INDEXING
	SVC	0B,XDRICA,R4,R4	:ASCII MESSAGE LABEL
	JAL	R10,XDRISB	:GO DUMP ISIS CONTROL MESSAGE
	J	XDR090		:GO TO NEXT MESSAGE
XDR0B0	SVC	0B,XDRMS3	:"DATA" MESSAGE HEADER
	JAL	R10,XDRISA	:GO DUMP ISIS DATA MSG
	J	XDR090		:GO TO NEXT MESSAGE
XDR0C0	LA	R4,,R2,R2	:FOR INDEXING
	SVC	0B,XDRICB,R4,R4	:ASCII MESSAGE LABEL
	TBT	R2,XDRVL	:VARIABLE LENGTH MESSAGE ??
	JNFS	XDR0D0		:IF SO BECAUSE CAN'T HANDLE YET
	JAL	R10,XDRISC	:GO DUMP ISIS INTRANODE MESSAGE
	J	XDR090		:GO TO NEXT MESSAGE
XDR0D0	CLHI	R2,8		:AUX CIRCUIT REQUEST ??
	JN	XDR0E0		:MUST BE "1-DOWN"
	LA	R4,0A,R1	:STEP TO SIZE BYTE
	CR	R4,RS		:CHECK FOR WRAP AROUND
	JLFS	XDR0D4		:IF NOT
	SR	R4,RS		:IF SO
XDR0D4	LB	R6,RING,RR,R4	:GET VARIABLE STRING SIZE
	AIS	R6,0B		:ADD CONSTANT PORTION
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E
	JAL	R10,XDRISE	:TO PUT OUT MESSAGE
	J	XDR090
XDR0E0	LA	R4,5,R1		:STEP TO 1-DOWN STRING SIZE
	CLHI	R4,RS		:CHECK FOR WRAP AROUND
	JLFS	XDR0E4		:IF NOT
	SHI	R4,RS		:IF SO
XDR0E4	LB	R6,RING,RR,R4	:GET VARIABLE MESSAGE SIZE
	AIS	R6,6		:ADD FIXED MESSAGE LENGTH
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E
	JAL	R10,XDRISE	:TO PUT OUT MESSAGE
	J	XDR090		:TO CONTINUE
XDR0F0	SVC	0B,XDRMS4	:NEEDLE MESSAGE
	LB	R6,RING+3,R1,RR	:GET ADDITIONAL LENGTH
	AIS	R6,4		:ADD FIXED PORTION
	LHI	R0,20		:INSERT A BLANK
	SVC	KIO,0E		:PUT IT OUT
	JAL	R10,XDRISE	:TO PUT REST OF MESSAGE
	J	XDR090

CAPIT	TBT	R0,CAPITT	:TEST FOR LOWER CASE CHARACTER
	JER	R1		:IF NOT
	SHI	R0,20		:ADJUST TO CAPITALIZE
	JR	R1		:RETURN


:	R1 - RING INDEX
:	R2 - MSG CODE TYPE
:	R3 - PORT #
:	R4 - SCRATCH
:	R5 - BYTE TO OUTPUT
:	R6 - SCRATCH
:	R7 - LINE LENGTH COUNTER
:	RS - RING SIZE  (R8)
:	RR - RING START (R9)
:	R10- LINK TO HERE
:	R11- LINK TO XDPUT

:	DATA MESSAGE
XDRISA	LA	R6,3,R2		:MESSAGE LENGTH=MESSAGE TYPE+3
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E		:LETS BE TIDY
	J	XDRISE
:	CONTROL MESSAGE
XDRISB	LB	R6,LENGTH+9E,R2,:MESSAGE LENGTH FROM TABLE (IN SEG F)
	AIS	R6,2
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E
	J	XDRISE
:	INTRANODE MESSAGE TYPE
XDRISC	LHL	R6,LP0LST,,	:SEG F HAS THIS TOO
	LB	R6,NRATE,R6,R2,	:MESSAGE LENGTH FROM TABLE
	AIS	R6,2
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E
	JFS	XDRISE
XDRISD	SVC	0B,XDRASC,,	:ASCII EQUIVALENT OF LINE
	SVC	0B,XDCRLF,,	:NEW LINE
	SVC	0B,XDRMS5	:4 BLANKS FOR ALIGNMENT
XDRISE	LIS	R7,0		:LINE LENGTH COUNTER
XDRISF	LB	R0,RING,R1,RR	:NEXT BYTE FROM RING
	LR	R5,R0		:SAVE A GOOD COPY OF IT
	NHI	R0,7F		:IGNORE MSB
	TBT	R0,XDRECH	:PRINTABLE ??
	JNFS	XDRISH		:YES, GET ORIG. BYTE BACK
	LHI	R0,2E		:DEFAULT "." CHARACTER
	JFS	XDRISH+2	:SET CHAR TO "."
XDRISH	LR	R0,R5		:ELSE IF OK TO PRINT IT
:XDRISH+2
	LR	R4,R7		:COMPUTE WHERE TO PLUG INTO LINE
	NHI	R4,0F		:16 BYTES PER LINE
	STB	R0,XDRASC+4,R4,,:PUT 'ER THERE
	JAL	R11,XDPUT,,	:PUT IT OUT
	AIS	R1,1		:BUMP RING INDEX
	CR	R1,RS		:END OF RING ??
	JLFS	XDRISG		:IF NOT
	SR	R1,RS		:FOLD TO RING START
XDRISG	AIS	R7,1		:LINE LENGTH
	SIS	R6,1		:CHECK FOR END OF MSG
	JLE	XDRISI		:FINISH BLANKING AND PRINT	
	THI	R7,0F		:END OF LINE
	JE	XDRISD		:IF SO
	THI	R7,1		:END OF HALFWORD
	JN	XDRISF		:IF NOT TO CONTINUE
	LHI	R0,20		:ADD A SPACE
	SVC	KIO,0E		:TO FORMAT WORDS
	J	XDRISF
XDRISI	LHI	R0,20		:BLANK
XDRISJ	NHI	R7,0F		:LINE LENGTH OF 16
	JEFS	XDRISK		:IF TO END OF LINE
	STB	R0,XDRASC+4,R7,,:PUT IN A BLANK
	AIS	R7,1		:COUNT ON UP
	JBS	XDRISJ		:AND SEE IF DONE
XDRISK	SVC	0B,XDRASC,,	:PUT IT OUT
	JR	R10		:DONE



:	R0 USED BY SVC FOR OUTPUT CHARACTER
:	R1-R3 SAVED
:	R4 DESTROYED
:	R5 BYTE TO BE OUTPUT
:	R11 LINK
XDPUT	LBR	4,5		:COPY IT
	SRHLS	4,4		:LEFT NIBBLE
	LB	0,SIAASC,4,	:CONVERT TO ASCII ("0" TO "F")
	SVC	KIO,0E		:PUT IT OUT TO TTY
	NHI	5,0F		:RIGHT NIBBLE
	LB	0,SIAASC,5,	:CONVERT TO ASCII ("0" TO "F")
	SVC	KIO,0E		:PUT IT OUT TO TTY
	JR	R11		:RETURN

	SUBTTL	ISIS RING INTERPRETER (DATA AREAS)
	SEG	0
XDRSS0	HS	0
XDRPLU	SC	/"8D"8A"2B/		:<CR>, <LF>, "+"
SIAASC	AC	/0123456789ABCDEF/
CAPITT	HC	0,0,0,0,0,0,7FFF,0FFE0
XDRECH	HC	0,0,0FFFF,0FFFF,0FFFF,0FFFF,0FFFF,0FFFE
XDCRLF	SC	/"8D"8A/
XDRVL	HC	0082,0000	:VARIABLE LENGTH MESSAGE FLAGS
XDRMS5	SC	/    /
XDRMS4	SC	/NDL/		:NEEDLE
XDRMS3	SC	/DTA/		:DATA
XDRMS2	SC	/"8D"8ARING EMPTY"8D"8A/
XDRASC	SC	/  *                */
XDRSEC	HS	2		:SLOWC TIME TO END TRACE
XDRCEI	HS	1		:OUR CEI
XDRWFL	HS	1		:USER SAYS RING WRAPPED ALREADY

:	ISIS CONTROL MESSAGES
XDRICA	HS	0
	SC	/DET/	:DETACH MESSAGE TYPE
	SC	/ZAP/	:DISCONNECT MESSAGE
	SC	/NOS/	:APPLY BACK-PRESSURE (NO SEND)
	SC	/SND/	:RELEASE BACK-PRESSURE (SEND)
	SC	/ICM/	:FLUSH OUTPUT (GOBBLER)
	SC	/BKG/	:FLUSH INPUT (BACK GOBBLER)
	SC	/BLK/	:DATA LOST IN THIS DIRECTION (BLACK BALL)
	SC	/GRY/	:DATA LOST IN OPPOSITE DIRECTION (GREY BALL)
	SC	/EDE/	:ENTER DEFERED ECHO MESSAGE
	SC	/LDE/	:LEAVE DEFERED ECHO MESSAGE
	SC	/ETM/	:ENTER TRANSPARENCY MODE
	SC	/LTM/	:LEAVE TRANSPARENCY MODE
	SC	/GB /	:GREEN BALL
	SC	/RB /	:RED BALL
	SC	/YB /	:YELLOW BALL
	SC	/OB /	:ORANGE BALL
	SC	/BRK/	:BREAK DETECTED
	SC	/HNG/	:HANG UP
	SC	/QTP/	:QUERY TERMINAL PARAMETER
	SC	/STP/	:SET TERMINAL PARAMETER
	SC	/PSN/	:PSEUDO NEEDLE
	SC	/NLC/	:NORMAL LOGON CHAR
	SC	/NLS/	:NORMAL LOGON STATUS
	SC	/LOF/	:LOG ON FAILURE
	SC	/NCC/	:NORMAL CIRCUIT COMPLETE
	SC	/ADA/	:ADDENDUM TO ACCOUNTING
	SC	/SHG/	:SUPER-HANG UP
	SC	/TLM/	:SET TRANSMIT LIMIT
	SC	/EBK/	:END OF BREAK
	SC	/ZAK/	:ZAP ACK
	SC	/EAO/	:ENTER ALTERNATE OUTPUT DEVICE MODE
	SC	/LAO/	:LEAVE ALTERNATE OUTPUT DEVICE MODE
	SC	/ZAR/	:ZAP WITH REASON
	SC	/SIX/	:START INTERFACE INFORMATION EXCHANGE
	SC	/TIX/	:TERMINATE INTERFACE INFORMATION EXCHANGE

:	INTRA NODE MESSAGES
:	-------------------

XDRICB	HS	0
	SC	/RQR/	:RESTART REQUEST
	SC	/RST/	:RESTART INTERFACE
	SC	/NTO/	:NODE HAS BEEN TAKEN OVER
	SC	/REP/	:REPORT TO SUPERVISOR'S LOG
	SC	/RHS/	:REPORT HOST STATUS (OBSOLETE)
	SC	/RAC/	:REPORT ACCOUNTING
	SC	/TIM/	:GMT TIME
	SC	/RNP/	:REQUEST FOR NORMAL PSEUDO NEEDLE
	SC	/RAP/	:REQUEST AUX PSEUDO-NEEDLE
	SC	/PSR/	:PSEUDO-NEEDLE REJECTED
	SC	/HPA/	:HOST PORT AVAILABILITY
	SC	/HNA/	:HOST NOT ACCEPTABLE
	SC	/RHC/	:REPORT HOST COST
	SC	/NSU/	:NO SUPERVISOR
	SC	/ODN/	:1-DOWN TEXT
	SC	/RAH/	:REPORT ALL HOSTS
	SC	/HSR/	:HOST STATUS REPORT
   