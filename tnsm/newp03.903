:
: PATCH FILE FOR PBT 9.03
: 
        LO      BSCPTP
        LO      BSCEXC
PATCH(880107,1100,J/MORDEN,FLXMT1,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,0A0)            :DO NOT FLUSH LOGGED OFF MESSAGE RIGHT AWAY
        LH     R3,SMZDEV,,     :IS THE SPACE MANAGEMENT ROUTINE ZAPPING DEV
        JL      NFLSH           :NO - DO A NORMAL FLUSH
        CR      RDEV,R3         :IS IT THIS DEVICE
        JN      NFLSH           :NO - DO A NORMAL FLUSH
        PKCMD(XMT,RDEV,RDEV)    :PEEK AT COMMAND LINK TO GET BUFFER ADDRESS
        LB      R5,BBUFER+18+0A,R3,  :IS IT START OF LOGGED OFF MESSAGE
        CI      R5,0CB          :IS IT AN L
        JN      NFLSH           :NO - DONE CHECKING - CONTINUE WITH FLUSH
        LB      R5,BBUFER+18+0B,R3,   :GET NEXT CHARACTER
        CI      R5,6B           :IS IT A O
        JN      NFLSH           :NO - CONTINUE WITH FLUSH
        LB      R5,BBUFER+18+0C,R3,   :GET NEXT CHARACTER
        CI      R5,0E3          :IS IT A G
        JN      NFLSH           :NO - CONTINUE WITH NORMAL FLUSH
        SBT     RDEV,XMTFSH,,   :FLUSH NEXT TIME IF LOGGED OFF NOT DELIVERED
        LCS     R5,1
        STH     R5,SMZDEV,,     :TURN OFF FLAG SO NORMAL PROCESS NEXT PASS
        J       FLXMT3,,        :STOP FLUSHING FOR THIS DEVICE
NFLSH   PKCMD(XMT,RDEV,RDEV)    :RESTORE SOURCE INSTRUCTION
        J       FLXMT2-0C,,     :CONTINUE WITH MAIN CODE
CONPATCH(ZAPM20+14,,6)          :SET UP FLAG FOR FORGROUND
        J       PA1PTR,,
CONPATCH(PA1PTR,,14)
        STH     RDEV,SMZDEV,,   :SAVE THE DEVICE NUMBER AS A FLAG
        LHL     RDCB,DEVTAB,RDEV,RDEV   :FROM SOURCE
        J       ZAPM20+1A,,     :BACK TO SOURCE
CONPATCH(PA0PTR,,4)
SMZDEV  HS      1
ENDPATCH(NSR#1646 SHOW LOGGED OFF MESSAGE WITH REASON WHEN BUFFER OR COMMAND LINK ZAP)
        FO      BSCPTP
        FO      BSCEXC
:  THIS PATCH MODIFIES THE RESULTS OF THE BOM ECPS COMMAND SO THAT ONLY
:  3270 DATA WILL BE COUNTED AS IT IS TAKEN FROM OR PLACED IN THE
:  DISPATCHER RINGS.  IT WAS PREPARED AS A RESULT OF SOUTHWESTERN 
:  BELL'S EXPRESSED CONCERNS OVER THE DIFFERENCES BETWEEN THE CHARACTER
:  COUNTS REPORTED BY THE HOST AND TERMINAL INTERFACES WHEN COUNTING
:  THE SAME DATA.  WITH THIS PATCH, ONLY NATIVE MODE(FROM 3270 HOST
:  INTERFACE OR SNA HOST INTERFACE) WILL BE COUNTED.  VIRTUAL TERMINAL
:  MODE DATA WILL NOT BE COUNTED.  TO MAINTAIN CONSISTANCY, 3270 HOST
:  INTERFACES(V 10.03) WHICH COMMUNICATE WITH THIS INTERFACE SHOULD
:  INCLUDE THE PATCH PBH10.PXX.  THIS PATCH ONLY NEEDED TO ADJUST
:  THE CHARACTER COUNTING MECHANISM FOR DATA BEING OUTPUT FROM THE SLOT
:  TO THE NETWORK.

PATCH(871012,1650,J/MORDEN,OSCA15-16,,4)
        J       OSCA16          :SKIP OVER COUNTING IN OUTPUT COMMAND QUE
                                :SCANNER
CONPATCH(OND30,,6)              :DO COUNTING IN OND INSTEAD
        J       PA1PTR,,
CONPATCH(PA1PTR,,70)
        PUSH(R0)                :WORK REGISTER
        PUSH(R5)
        LH      R0,CP.ON,,      :ARE WE TRACING CPS
        JL      LEAVE           :LEAVE PATCH IF NOT
        LH      R0,STMTC,,        :ARE WE JUST STARTING TO MOVE CHAR'S FROM BUFF
        JE      TTC             :IF YES THEN IT IS TIME TO COUNT THEM
LEAVE   POP(R5)
        POP(R0)
        JAL     R4,GETBC,,      :RESTORE DESTROYED INSTRUCTIONS
        LH      R5,DA.ONX,,
        J       OND30+0A,,      :BACK TO SOURCE CODE
TTC     LH      R0,CP.LN,,      :LINE OR SLOT TRACE?
        JLFS    ATCT            :JUMP IF FOR SLOT
        LHL     R5,DDEV,RDCB,   :GET THE DEVICE NUMBER
        CLB     R0,DEVLN,R5,    :IS THIS THE LINE BEING TRACED?
        JN      LEAVE
ATCT    AM      RCNT,CP.CNT,,   :ADD COUNT OF DATA BEING MOVED TO ORING
        LIS     R0,1
        STH     R0,STMTC,,        :SET FLAG SO WE DON'T COUNT AGAIN
        J       LEAVE
CONPATCH(OND32+0A,,6)           :TURN OFF FLAG WHEN DONE MOVING DATA TO ORING
        J       PA1PTR,,
CONPATCH(PA1PTR,,10)
        LIS     R3,0
        STH     R3,STMTC,,
        LHL     RDEV,DDEV,RDCB,
        J       OND32+10,,      :BACK TO SOURCE
CONPATCH(PA0PTR,,2)
STMTC   HC      0               :FLAG TO KNOW WHEN FIRST ENTERING LOOP TO
                                :MOVE DATA TO ORING

ENDPATCH(NSR#1647 ADJUST CHARACTER PER SECOND COUNTS)
:  PATCH CREATED TO FIX OCCASIONAL ILLEGAL MEMORY REFERENCES OCCURING
:  IN THE TBOM.  OCCASIONALLY THE ARGUMENTS FOR A GIVEN BOM TOKEN ARE
:  NOT YET AVAILABLE TO THE UTILITY ROUTINE THAT GETS THEM AND SO THE 
:  BOM EXECUTES A SPECIAL TIMER ROUTINE.  THE PROBLEM IS THAT THIS TIMER
:  ROUTINE CHANGES R7 WHICH IS USED TO RETURN TO THE BOM COMMAND PROCESSOR.
:  THIS PATCH WILL PRESERVE R7 IN THOSE CIRCUMSTANCES.

        LO      STATUS
PATCH(871021,1850,J/MORDEN,PA0PTR,,6)
R7SAV   WS      1
CONPATCH(DS.TIM,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,18)
        ST      R7,R7SAV,,      :SAVE R7
        LHL     R7,XD.TIM,,
        JE      DS.GCH,,
        J       DS.TIM+8,,
CONPATCH(DS.TIM+3E,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,18)
        L       R7,R7SAV,,      :PUT BACK R7
        L       R1,R1SAV,,
        J       DS.GCH,,
        FO      STATUS
ENDPATCH(NSR#1649 PRESERVE REGISTER 7 WHEN BOM ARGUMENTS NOT YET AVAILABLE)
:  PATCH IS DESIGNED TO CORRECT A PROBLEM CONDITION IN WHICH THE PBH
:  BEGINS TO READ PAD CHARACTERS FROM THE LINE AS IF THEY WERE DATA.
:  THIS IMPLIES THAT A MESSAGE TERMINATOR(ETB,ETX) WAS NOT RECIEVED
:  BY THE INTERFACE.  THE RESULT IS THAT A MASSIVE AMOUNT OF THESE FF's
:  ARE SENT TO THE REMOTE INTERFACE CAUSING THE BUFFER USAGE FOR CONTAINING
:  THESE CHARACTERS TO EXCEED MAXIMUM ALLOWED LIMITS.  THIS PATCH WILL WATCH
:  FOR THE CONDITION AND CORRECT IT BY INSERTING AN ETX IN THE DATA STREAM
:  TO FORCE A MESSAGE TERMINATION.  THIS CAUSES A FORWARD ABORT AND A
:  SUBSEQUENT RETRANSMISSION FOR PROPER RECOVERY.


        LO      BSCRCV
        LO      BSCCHR
        LO      BSCRRC
        LO      BSCEXC
PATCH(871102,1450,J/MORDEN,PA0PTR,,30)
NISETX    HS      NBILIN
R3SV    WS      1


NUMFF   HS      NBILIN

CONPATCH(RSTP10,,6)           :NOW WATCH FOR THE CONDITION
        J       PA1PTR,,
CONPATCH(PA1PTR,,100)
        LB      RC,0,R15,R14    :GET A CHARACTER FROM INPUT SECTOR
        S       R3,R3SV,,         :SAVE R3 FOR WORK
        LH      R3,NISETX,RL2,
        JN      INSEXT
        LA      R3,RSNDAT-RSEG,,        :ADDRESS OF NON-TRANS DATA TABLE
        CR      R3,RST          :ARE WE LOOKING AT NON-TRANSPARENT DATA
        JE      INDM            :GO TO IN NORMAL DATA MODE
        LA      R3,RSTDAT-RSEG,,         :ADDRESS OF TRANSPARENT DATA TABLE
        CR      R3,RST          :ARE WE PROCESSING TRANSPARENT DATA
        JE      ITDM            :GO TO IN TRANSPARENT DATA STATE
PEXIT3  L       R3,R3SV,,         :RESTORE R3
        J       RSTP10+6,,      :BACK TO SOURCE
INDM   CHI     RC,0FF          :IS CHARACTER AN FF PAD
        JN      NDNFF           :NORMAL DATA AND NOT AN FF PAD
        LH      R3,NUMFF,RL2,    :GET NUMBER OF CONSECUTIVE PADS SO FAR
        AIS     R3,1
        STH     R3,NUMFF,RL2,    :STORE NUMBER OF CONSECUTIVE PADS
        CHI     R3,$A50           :SHOULD NOT EXCEED $A50 HEX PADS
        JG      RECOVN          :RECOVER FROM PROBLEM CONDITION
        J       PEXIT3          :OR LEAVE PATCH
NDNFF   LIS     R3,0            :IF NOT A PAD CHARACTER
        STH     R3,NUMFF,RL2,   :RESET PAD COUNTER FOR LINE
        J       PEXIT3
ITDM   CHI     RC,0FF          :IS CHARACTER A PAD
        JN      TDNFF           :TRANSPARENT DATA AND NOT A PAD
        LH     R3,NUMFF,RL2,    :NUMBER OF PADS SO FAR ON THIS LINE
        AIS     R3,1
        STH     R3,NUMFF,RL2,
        CHI     R3,$A2500       :HOW MANY PADS SO FAR
        JG      RECOVT          :IF EXCEEDED THEN GO RECOVER FROM EVENT

        J       PEXIT3
TDNFF   LIS     R3,0
        STH     R3,NUMFF,RL2,    :RESET PAD COUNTER
        J       PEXIT3          :LEAVE PATCH
RECOVN  LHI     RC,0C0          :RECOVER BY FORCING MESSAGE TERMINATION
        LIS     R3,0            :RESET PAD COUNTER TO ZERO
        STH     R3,NUMFF,RL2,
        J       PEXIT3          :LEAVE PATCH
RECOVT  LIS     RC,8            :INSERT A DLE TO START FORCING MESSAGE TERMINAT
        LIS     R3,1
        STH     R3,NISETX,RL2,
        J       PEXIT3
INSEXT  LI     RC,0C0          :INSERT AN ETX
        LIS     R3,0
        STH     R3,NUMFF,RL2,    :RESET PAD COUNTER
        STH     R3,NISETX,RL2,
        J       PEXIT3
ENDPATCH(NSR#1650 PATCH FOR FIXING PROBLEMS WITH PAD CHARACTERS IN DATA MODE)
        FO      BSCRCV
        FO      BSCEXC
        FO      BSCCHR
        FO      BSCRRC
:
	REMARK	%   END PATCH FILE FOR PBT 9.03
P0END	EQ	PA0PTR
P1END	EQ	PA1PTR
:---------------------------------------------------------------------
: Patch name:  SEQCLK.903                     Product and Version:  PBT 9.03
:     Author:  JEFF MORDEN                            Organization:  STS
:   Customer:  PAYMENT SYSTEMS                            Date Written:  2/15/89
: Description of Problem:  #
:       WHEN HOST REQUESTS ACKNOWLEDGMENT FROM THE PBT OF THE SUCCESSFUL
:       DELIVERY OF A COMMAND TO THE CONTROL UNIT THE SEQUENCE NUMBER
:       OF THE ACKED MESSAGE WAS NOT BEING PROPERLY INCLUDED IN THE
:       DSP ACK PACKET.  PATCH INSURES THAT THE SEQUENCE NUMBER OF
:       THE COMMAND RECEIVED BY THE PBT IS INCLUDED IN THE COMMAND
:       LINK(S) REPRESENTING THAT MESSAGE.
:
:---------------------------------------------------------------------


PATCH(012089,1100,J/MORDEN,DSPQ10+4,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,20)
        OH      R0,DIR0,RDCB,
        STH     R0,DIR0,RDCB,
        RBT     R6,DFLAGS,RDCB,
        J       DSPQ10+0A,,
ENDPATCH(MAKE SURE SEQUENCE NUMBER OF MESSAGE IN COMMAND LINK)
:---------------------------------------------------------------------
: Patch name:  DBLLOG.TST                   Product and Version:  PBT9.03
:     Author:  JEFF MORDEN                  Organization:  STS
:   Customer:  INSNET                       Date Written:  03/18/88
: Modified by Peggy Jing for INSNET Ticket # 260826 on 09/22/89
: Description of Problem:  
: PATCH TO FIX PROBLEMS WITH TWO PSEUDO NEEDLE REQUESTS BEING MADE FOR THE
: SAME DEVICE.  THE PROBLEM WAS THAT DURING THE LOGON PROCESS FOR A DEVICE
: THAT HAD NOT YET ENTERED NATIVE MODE THE PBT WAS RECEIVING AND ADDITIONAL
: READ FROM THE CONTROL UNIT.  SINCE THE PBT HAD NOT YET ENTERED NATIVE MODE
: ITS PROCESSING STATE WAS SUCH THAT IT TREATED THE ADDITIONAL READ AS A
: MENU SELECTION AND REQUESTED ANOTHER PSUEDO NEEDLE FOR THAT DEVICE.  THIS
: PATCH WILL DISCARD ANY RECEIVED MESSAGES UNTIL THE LOGON IS COMPLETE AND
: THE DEVICE HAS ENTERED NATIVE MODE.
:--------------------------------------------------------------------------
        LO      BSCCHR
        LO      BSCRCV
PATCH(031888,1100,J/MORDEN,MENU+6,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,50)
        LI     R0,10           :PROPER DLFLD VALUE WHEN ENTERING THIS ROUTINE
        CLB     R0,DLFLD,RDCB,  :IS IT THAT VALUE FOR DEVICE MAKING MENU SELECT
        JE      LCK,,           :YES THEN CONTINUE WITH LOGON PROCESS
        JAL     R5,FLOUT,,      :FLUSH MESSAGE FROM OUTPUT QUEUE
        RETJ(R5)                :EXIT MENU PROCESSING ROUTINE
LCK     LB      R0,BBUFER+1,RBA,        :GET CONTROL UNIT ADDRESS OF MENU SELECT
        STB     R0,LSEL,,                  :SAVE IT
        LB      R0,BBUFER+2,RBA,        :GET DEVICE ADDRESS AND SAVE IT
        STB     R0,LSEL+1,,
        LB      R5,DEVHST,RDEV,        :RESTORE SOURCE INSTRUCTION
        J       MENU+0C,,               :RETURN TO SOURCE
CONPATCH(PA0PTR,,50)
SLRS    WS      10
LSEL    BS      4
ENDPATCH(PREVENTS TWO PSEUDO NEEDLE REQUESTS FOR SAME DEVICE)
        FO      BSCCHR
        FO      BSCRCV
:---------------------------------------------------------------------
: Patch name:  FIXSPM.903                     Product and Version:  PBT 9.03
:     Author:  JEFF MORDEN                            Organization:  STS
:   Customer:  NIS                            Date Written:  2/13/89
: Description of Problem:  #
:
:               THIS PATCH REPRESENTS A CORRECTION TO A SOURCE PATCHFILE
:               PATCH IN WHICH PROVISION WAS NOT PROPERLY MADE FOR HOST
:               TYPES OTHER THAN IBM ENGLISH.  ERROR OCCURED WHEN THE CODE
:               ATTEMPTED TO INDEX INTO AN ADDRESS TABLE THAT WAS ONLY GIVEN
:               ONE ENTRY IN THE ORIGINAL PATCH.  THIS PATCH REDOES THE OLD
:               PATCH WITH A COMPLETE ADDRESS TABLE AT NZASG.
:
: 
:  PBT'S HAVE BEEN CRASHING DUE TO THE INTERFACE BEING OUT OF COMMAND LINKS
:  OR BUFFERS.  THIS CAN HAPPEN OCCASIONALLY ON A VERY BUSY INTERFACE OR
:  WHEN DATA IS ATTEMPTED TO BE SENT TO AN INOPERATIVE DEVICE OR APPARENTLY
:  WHEN A LARGE NUMBER OF PVC'S ARE BEING INITIATED FOR INOPERATIVE DEVICES
:  AND HOST INTERFACES THAT ARE DOWN.  THERE IS A SPACE MANAGEMENT ROUTINE
:  THAT IS SUPPOSED TO WATCH FOR CRITICALLY LOW RESOURCES AND ZAP THE USER OF 
:  THE GREATEST AMOUNT OF RESOUCE AND RETURN THEM TO THE FREE POOL RATHER 
:  THAN CRASH THE SLOT.  PROBLEM WAS THAT THE ROUTINE ONLY RAN ABOUT EVERY
:  .7 SECONDS AND RESOURCES WERE BEING EXHAUSTED BETWEEN CHECKS.  THIS PATCH
:  WATCHES FOR RESOURCES TO DROP BELOW A GIVEN LEVEL AND THEN INCREASES THE
:  FREQUENCY OF CHECKS.  IT ALSO SLIGHTLY RAISES THE BOTTOM THRESHOLDS OF
:  BUFFER AND COMMAND LINK AVAILABILITY TO ALLOW A LITTLE MORE ROOM TO
:  RESPOND TO A RESOUCE SHORTAGE.  A MESSAGE HAS BEEN ADDED TO INFORM USERS
:  OF THE REASON FOR THEIR CIRCUIT ZAP.  THE MESSAGE IN THE CODE WAS NOT
:  EXPLAINATORY AND WAS NOT BEING DELIVERED TO THE USERS.
        LO      FRNTND
PATCH(871230,1100,J/MORDEN,SPAMAN,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,28)
        L       R1,FASTC,,
        LHL     R0,CMDCNT,,
        CI      R0,30           :IS NUMBER OF COMMAND LINKS LEFT LESS THAN 30
        JG      SPAMAN+6,,      :N0 - SET USUAL INCRIMENT FOR TIME OF NEXT RUN
        LHL     R0,BUFCNT,,     :GET NUMBER OF REMAINING BUFFERS
        CI      R0,30
        JG      SPAMAN+6,,      :SET USUAL INCRIMENT FOR SPAMAN
        AI      R1,250           :YES - NEXT RUN OF SPAMAN IN .38 SECONDS
        J       SPAMAN+0C,,     :RETURN TO PUT ON TIMEOUT LIST
CONPATCH(SPAMAN+1A,,6)          :RAISE CRITICAL THRESHOLD FOR COMMAND LINKS
        CI      RT1,15
CONPATCH(SPAM10+4,,6)           :RAISE THRESHOLD FOR BUFFER COUNT
        CI      RT1,15
CONPATCH(NZMCRI+3,,1)           :CHANGE TO ERASE WRITE COMMAND TO CLEAR SCREEN
        BC      EWCMD
CONPATCH(SNDN20+32,,6)           :IS ZAP DUE TO INSUFFICIENT RESOURCES
        J       PA1PTR,,
CONPATCH(PA1PTR,,30)
        LHL     R1,TOZ1,,        :GET TYPE OF ZAP FLAG
        JE      POZAP1          :JUST A PLAIN OLD ZAP
        LIS     R1,0
        STH     R1,TOZ1,,        :TURN OFF FLAG
        L       R1,NZASG1,R5,    :ADDRESS OF ALTERNATE ZAP MESSAGE
        J       SNDN20+38,,      :RETURN TO SOURCE
POZAP1  L       R1,NZMSG,R5,    :NORMAL ZAP MESSAGE
        J       SNDN20+38,,
CONPATCH(ZAPM20+0E,,6)           :TURN ON FLAG SHOWING RESOURCE LIMIT ZAP
        J       PA1PTR,,
CONPATCH(PA1PTR,,1A)
        LIS     RDEV,1
        STH     RDEV,TOZ1,,
        LH      RDEV,IMAX,,     :FROM SOURCE
        SBT     RDEV,XMTFSH,,
        J       ZAPM20+14,,
CONPATCH(PA0PTR,,58)
TOZ1    HS      1
NZASG1  WC      IEZAS1          :ADDRESS OF ALTERNATE ZAP MESSAGE TO BE USED
        WC      IKZAS1          :IBM KATAKANA
        WC      IEZAS1          :HITACHI ENGLISH
        WC      IKZAS1          :HITACHI KATAKANA
IEZAS1  HC      26
        BC      L.,O.,G.,G.,E.,D.,SP.,O.,F.,F.,SP.,5A,5A,5A,SP.
        BC      R.,E.,S.,O.,U.,R.,C.,E.,SP.,L.,I.,M.,I.,T.,SP.,E.,X.,C.
        BC      E.,E.,D.,E.,D.
IKZAS1  HC      13
        BC      K.RO,K.KU,K.DAK,K.O,K.HU,K.SP,K.RI,K.SO,K.DASH,K.SU
        BC      K.KA,K.DAK,K.NA,K.KU,K.NA,K.RI,K.MA,K.SI,K.TA
ENDPATCH(NSR#1646 PREVENTS CRASHING DUE TO SUDDEN SHORTAGE OF BUFFERS OR COMMAND LINKS)
        FO      FRNTND
:---------------------------------------------------------------------
: Patch name:  B79E91.TST                   Product and Version:  PBT9.03
:     Author:  PEGGY modified from NOB79E.505      Organization:  STS
:   Customer:  MDC                          Date Written:  6/27/89
: Description of Problem:  
: patch to send 9F instead of B7 9E when circuit must be zapped during
: logon (in response to B4 message)
: ESCALATION # 248188 for TYMNET MDC
:---------------------------------------------------------------------
        LO     FRNTND
PATCH(890627,1100,P/JING,LZAP2+20,,6)
        J      PA1PTR,,
CONPATCH(PA1PTR,,4A)
        PUSH(R1)
        PUSH(R2)
        PUSH(R4)
        LHL    R1,DPORT,RDCB,
        JEFS   GONER
        LIS    R0,3
        LHI    R2,ZAPMSG
        JAL    R4,SLOR,,
        JAL    R4,ELOR,,
GONER   POP(R4)
        POP(R2)
        POP(R1)
        JAL    R5,DOZAP,,
        J      LZAP2+28,,
ENDPATCH(SEND 9F INSTEAD OF B7 / 9E IN LOGON MODE)
        FO     FRNTND


:---------------------------------------------------------------------
: Patch name:  B79E92.TST                     Product and Version:  PBT 9.03
:     Author:  PEGGY JING modified from B79E2.TST    Organization:  STS
:   Customer:  TYMNET MDC                            Date Written:  6/27/89
: Description of Problem:  
:       USERS WERE DOING A MANUAL LOGON WHICH WS NOT SUCCESSFUL AND THEY
:       WERE RETURNED TO "PLEASE LOG IN" AT THEIR CRT.  SINCE THEY DID NOT
:       WISH TO DO ANOTHER LOGON THEY WENT TO THE NETWORK SERVICES SCREEN
:       TO TERMINATE THE LOGON AND RETURN TO THE MAIN MENU.  THE ROUTINE
:       NZAP WAS CALLED TO ZAP THE CIRCUIT AND THIS GENERATED A B7/9E ISIS
:       MESSAGE SEQUENCE IN THE ORING.  THIS CAUSES A DISPATCHER CRASH
:       IN ISIS VERSION 7.00 AND ABOVE.  WHILE A CIRCUIT IS IN LOGON STATE
:       ONLY A 9F WILL BE ACCEPTED BY ISIS.  THIS PATCH CHECKS THE DMODE
:       OF THE DEVICE AND DOES A PROPER LOGOFF.
-----------------------------------------------------------------
        LO      FRNTND
PATCH(062789,1110,P/JING,NZAP+10,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,60)
        LIS     R1,1
        CLB     R1,DMODE,RDCB,          :SEE IF DEVICE IS IN LOGON MODE
        JN      RNMZ                    :DO REGULAR ZAP FOR NZAP
        PUSH(R1)
        PUSH(R2)
        PUSH(R4)
        LHL     R1,DPORT,RDCB,
        JEFS    GONER1
        LIS     R0,3
        LHI     R2,ZAPMSG
        JAL     R4,SLOR,,
        JAL     R4,ELOR,,
GONER1  POP(R4)
        POP(R2)
        POP(R1)
        J       GONER2
RNMZ    JAL     R5,SNDZAP,,
GONER2  JAL     R5,DOZAP,,
        J       NZAP+18,,
ENDPATCH(SEND 9F INSTEAD OF B7 9E WHEN ZAPING CIRCUIT IN LOGON MODE)
	FO	FRNTND
:PATCH TO RESEND THE MSG WHEN ENQ RECEIVED FROM THE LINE
	LO	BSCPTP
	LO	BSCRRC
	LO	BSCSXM
	LO	BSCEXC
PATCH(101689,1000,E/ESPOUY,irrvi+8,,4)
	j	rinit
ENDPATCH(send specific poll after rvi received)
	FO	BSCPTP
	FO	BSCRRC
	FO	BSCSXM
	FO	BSCEXC
	
:PATCH TO RESEND THE MSG WHEN ENQ RECEIVED FROM THE LINE
	LO	BSCPTP
	LO	BSCRRC
	LO	BSCSXM
	LO	BSCEXC
PATCH(101689,1000,E/ESPOUY,SXMT+4,,2)
	HC	XRSDAT-PSEG		:ENQ
ENDPATCH(RESEND MSG WHEN RECEIVED ENQ)
	FO	BSCPTP
	FO	BSCRRC
	FO	BSCSXM
	FO	BSCEXC
	
:---------------------------------------------------------------------
: Patch name:  RCVERR.903                     Product and Version:  PBT 9.03
:     Author:  JEFF MORDEN                            Organization:  STS
:   Customer:  AIR FRANCE                            Date Written:  11/30/89
: Description of Problem:  #
:       PROBLEM WAS THAT ABORTED RECEIVE OPERATIONS AT THE PBT WERE NOT
:       BEING CORRECTLY COMMUNICATED TO THE PBH IN ALL CASES.  SPECIFICALLY,
:       THREE ERROR CONDITIONS WERE CLARIFIED:  1)  FORWARD ABORT GENEREATED
:       BY THE CONTROL UNIT BY TERMINATING A DATA BLOCK WITH ENQ,  2)  FORWARD
:       ABORT GENERATED BY THE CONTROL UNIT SENDING EOT INSTEAD OF THE
:       FINAL ETX BLOCK OF A MESSAGE AND 3)  FORWARD ABORT CAUSED BY RETRY
:       LIMIT BEING EXCEEDED DUE TO REPEATED BAD CRC ERRORS FOR A DATA
:       BLOCK SENT BY THE CONTROL UNIT.  THIS PATCH IS A REWORKING OF THE
:       RELEVANT ERROR AND DSP DATA LOGIC IN THE PBT.  IT DISABLES EARLY
:       DATA FORWARDING OF PARTIAL DATA BLOCKS TO THE PBH SO THAT THE 
:       CORRESPONDING PBH PROCESSES WILL NOT HAVE TO DEAL WITH CLEANUP OF
:       FORWARD ABORTED PARTIAL BLOCKS.  A BLOCK WILL NOT BE RELEASED TO
:       BACKGROUND UNTIL A GOOD CRC IS OBTAINED.  TRUE FORWARD ABORTS(DATA
:       TERMINATED BY ENQ) WILL BE SENT TO THE PBH JUST AS THEY ARE 
:       RECEIVED FROM THE CONTROL UNIT AND THE PBH WILL IN TURN TRANSMIT
:       THEM TO THE HOST IN THE SAME FASHION.  THE OTHER TWO FORWARD ABORT/
:       ERROR CONDITIONS WILL BE MADE TO RESULT IN A DSP RESPONSE ABORTED
:       MESSAGE TO THE PBH WHICH IN TURN WILL ABORT THE ASSOCIATED
:       TRANSMIT OPERATION TO THE HOST BY SENDING EOT TO THE HOST.
:
:---------------------------------------------------------------------


:
:  FIRST TURN OFF EDF OF PARTIAL BLOCK TO THE PBH
:
        LO      BSCRRC
        LO      BSCPTP
        LO      BSCRCV
        LO      BSCSRV
        LO      BSCCHR
        LO      BSCEXC
PATCH(113089,1100,J/MORDEN,RCVS10-12,,6)
        JAL     R2,TOFREL,,             :GO DETERMINE OF OKAY TO RELEASE MSG
CONPATCH(RCVB01+42,,6)
        JAL     R2,TOFREL,,             :SAME
CONPATCH(RCVSND+42,,6)
        JAL     R2,TOFREL,,             :ALSO THE SAME
CONPATCH(RCVD01+42,,6)
        JAL     R2,TOFREL,,             :ALSO ALSO THE SAME
CONPATCH(PA1PTR,,12)
TOFREL  THI     R0,ETXBIT!ETBBIT!ENQBIT :DO WE HAVE A BLOCK TERMINATOR
        JE      0C,R2                   :NO - SKIP RETURN OVER RELEASE INSTR
        LHL     R6,PPRCV,RDEV,RDEV      :YES - RESTORE FIRST RELEASE INSTR
        JR      R2                      :AND RETURN TO SOURCE

:
: NOW DEAL WITH CONDITION OF FORWARD ABORT FROM CONTROL UNIT BY MEANS OF
: DATA BLOCK TERMINATED BY ENQ.
:
:       FIRST DO NECESSARY FOREGROUND CHANGES
:
CONPATCH(RPTEN4,,6)                     :MAKE SURE MESSAGE SENT TO BACKGROUND
        J       PA1PTR,,
CONPATCH(PA1PTR,,68)
        CR      R4,RBBX                 :FROM SOURCE 
        JN      FORABT                  :IS A FORWARD ABORT
        CLH     RBBA,RBBCHN,RL2,        :FROM SOURCE - ANOTHER TEST
        JN      FORABT                  :ALSO A FORWARD ABORT
        J       RPDONE,,                :NOT FOR ABT - GO END RECEIVE

FORABT  TBT     RL,XPRDAT,,             :WAS THIS A TRANSPARENT DATA MESSAGE
        JN      FAXPRT                  :YES THEN JUMP
        LHI     RC,0B4                  :NO - GET REVERSE ENQ
        JAL     R10,RPDPUT,,            :AND PUT IN THE BUFFER
        J       MSGDON                  :MESSAGE IS NOW FINISHED
FAXPRT  LIS     RC,8                    :GET REVERSE DLE FOR TRANSPARENT FA ABT
        JAL     R10,RPDPUT,,            :PUT IN BUFFER
        LHI     RC,0B4                  :REVERSE ENQ
        JAL     R10,RPDPUT,,            :ALSO PUT IN BUFFER
MSGDON  LH      R0,RE.ON,,              :FROM SOURCE - ARE WE TIMING PROCESS
        JLFS    ARPEDA                  :NO
        CLB     R0,CDEV,RL,             :IS IT THE RIGHT DEVICE
        JNFS    ARPEDA                  :NO AGAIN
        LIS     R0,0
        STH     R0,RE.FLG+2,,           :INDICATE NEXT STX IF FIRST OF MULTI
                                        :BLOCK MESSAGE
ARPEDA  STB     RC,RMTYPE,RL,           :SAVE MESSAGE TERMINATOR
        LIS     RC,RCDABT               :GET ABORT RETURN CODE
        J       RPDONE,,                :NOW GO END RECEIVE

:
:NOW MOIDIFY END OF RECEIVE PROCESS SO THAT BLOCK TERMINATED WITH ENQ CAN
:BE SENT TO BACKGROUND AND NOT BE CONFUSED WITH OTHER BAD RECEIVES.
:
CONPATCH(RPDON4-10,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,22)
        CLHI    RC,RCDATB               :FROM SOURCE - GOOD DATA OP?
        JG      BADOP                   :NO - JUMP FOR FURTHER TEST
        J       RPDON4-8,,              :YES - CONTINUE IN SOURCE
BADOP   CLHI    RC,RCDABT               :IS IS A FORWARD ABORT
        JN      RPABT,,                 :NO - SOME OTHER BAD RECEIVE OP
        LHI     0F,ENQBIT              :YES - SET CODE FOR ENQ
        J       RPDON6,,                :RETURN AND CONTINUE IN SOURCE

:
:NOW MAKE SURE THE RECEIVE STATE IS PROPERLY RESET WHEN FORWARD ABORT IS
:RECEIVED.  ENQ AS WELL AS ETX IS SEEN AS A MESSAGE TERMINATOR AS WELL AS
:A BLOCK TERMINATOR.
:
CONPATCH(RPDON8+0C,,6)
        THI     0F,ETXBIT!ENQBIT               :TEST OF EITHER TYPE OF END
        JEFS    RPDN80                          :JUMP IF NOT EITHER - MUST BE
                                                :ETB
:
:NOW MODIFY PROTOCOL DRIVER TO PROPERLY RECORD AND PROCESS THIS FORWARD
:ABORTED BLOCK OF DATA
:
:     FIRST MODIFY STATE TABLES TO CONTAIN THE ADDRESS OF THIS NEW
:     PROCESSING ROUTINE.
:
CONPATCH(SRINIT+18,,2)
        HC      DOFAB-PSEG                      :FORWARD ABORT OF FIRST BLOCK
CONPATCH(SRCV+18,,2)
        HC      DOFAB-PSEG                      :FOR ABT OF SUBSEQUENT BLOCKS

:     NOW DEFINE THE ROUTINE.  IT IS BASICALLY THE SAME AS THE GOOD DATA
:     RECEIVED ROUTINE BUT ENDS WITH A SEND NAK TO ACKNOWLEDGE THE FORWARD
:     ABORT INSTEAD OF ACK TO GOOD DATA.


CONPATCH(PA1PTR,,0A8)
DOFAB   LHI     R3,RCVSTE               :SET AND COUNT ERROR TYPE TO SEE IF
        JAL     R5,SETERR,,
                                        :LIMIT REACHED
        LHI     R0,TREOT                :SET TIME FOR RECEIVING EOT AFTER NAK
        LHI     R15,ENQBIT              :SET ENQBIT FOR COMMAND
        STH     R0,RSTIME,RL2,          :STORE THE RECEIVE TIMEOUT
        LB      R7,CCU,RL,              :GET CONTROL UNIT INDEX
        LH      R4,PR.ON,,              :ARE WE TRACING POLL RESPONSE TIMES
        JL      DOFAB1                  :NO - THEN JUMP
        LH      R4,PR.SAV,,             :SLOT OR LINE TRACE?
        JLFS    DOFAB2                  :IF SLOT THEN SKIP AHEAD
        CR      R4,R7                   :IS THIS THE CONTROL UNIT BEING TRACED
        JN      DOFAB1                  :IF NOT - SKIP AHEAD
DOFAB2  TBT     RL,PR.ALR,,             :IS RESPONSE ALREADY TIMED?
        JNFS    DOFAB1                  :IF YES THEN SKIP AHEAD
        L       R4,FASTC,,              :GET CURRENT FASTC TIME
        S       R4,PR.PLL,RL2,RL2       :SUBTRACT TO GET HOW MANY TICKS USED
        AM      R4,PR.TCK,,             :ADD TO CUMULATIVE TOTAL
        LIS     R4,1
        AM      R4,PR.NMB,,             :BUMP NUMBER OF POLLS
DOFAB1  SLLS    R7,2                    :MAKE FULL WORK INDEX OF CONTROL UNIT
        LIS     R4,1
        AM      R4,RCVTOT,R7,           :
        L       R4,FASTC,,              :GET CURRENT TIME AGAIN
        ST      R4,POLTYM,R7,
        RBT     RL,CHNGBT,,             :SHOW ACTIVITY ON LINE
        TBT     RL,DHNGBT,,             :IS HANG PROCESS RUNNING
        JE      DOFAB3
        LIS     R4,2                    :GET CODE FOR ACTIVE STATE ON LINE
        STB     R4,LNSTAT,RL,           :RECORD IT
DOFAB3  STB     R2,RCURRC,,             :SAVE CURRENT RECEIVE RETURN CODE
        LR      R2,R1                   :PUT BUFFER COUNT INTO R2
        LIS     R0,0
        ST      R0,BSCETM,RL2,RL2       :RESET ERROR TIMER
        LB      R0,RCURRC,,             :GET CURRENT RECEIVE RETURN CODE
        STB     R0,RLRC,RL,             :STORE AS LAST RECEIVE RETURN CODE
        J       RSNAK,,                 :GO SEND NAK RESPONSE TO FORWARD ABORT

:
:     NEED TO ADJUST BACKGROUND TO UPDATE OUTPUT SEQUENCE NUMBER AT MESSAGE END
:     SO FIRST NEED TO ACCOUNT FOR THE MODULES LOCALIZED ABOVE
:
        FO      BSCRRC
        FO      BSCPTP
        FO      BSCRCV
        FO      BSCSRV
        FO      BSCEXC
        FO      BSCCHR

CONPATCH(OND40+0C,,4)
        THI     R0,ETXBIT!ENQBIT                :RECOGNIZE BOTH MESSAGE ENDS

:
:NOW NEED TO ADJUST FOR DATA ABORT BY WAY OF EOT FROM CONTROL UNIT.
:
:     NEED ONLY SMALL CHANGE IN PROTOCOL DRIVER
:
        LO      BSCPTP
CONPATCH(IRABRT,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,20)
        LB      R3,BSCRTY,RL,                   :GET MAXIMUM RETRY AND SAVE TO
        STB     R3,RETRY,RL,                    :SO THAT ONE EOT IS ENOUGH TO
        LHI     R3,RCVSTE               :TRIGGER AN ERROR REPORT AND
        JAL     R5,SETERR,,
        J       NXTPOL,,                         :DSP ERROR MESSAGE TO PBH.
:
:NOW CORRECT AN ERROR IN A PROTOCOL ROUTINE THAT PROCESSES THIS TYPE OF
:ABORT.  THE INSTRUCTION DID NOT TAKE INTO ACCOUNT THAT THE RECEIVE RETURN
:CODE LAST RECEIVED WAS SHIFTED LEFT 1 BIT TO MAKE A HALF WORD INDEX.  IT
:ATTEMPTS TO DO A COMPARE OF THE SHIFTED INDEX WITH THE NON-SHIFTED. THIS
:FIXES IT.
:
CONPATCH(RREOT+4,,4)
        CLHI    R0,2                    :SHIFTED ETURN CODE OF ETB BLOCK


        FO      BSCPTP

:
:NOW DEAL WITH LAST CASE OF REPEATED BAD CRC'S FOR A DATA BLOCK
:
:   NEED ONLY MAKE CHANGE IN THE RECEIVE PROCESS OF FOREGROUND.  THESE
:   CHANGES WILL INSURE THAT THE BAD BLOCK IS DISCARDED AND THAT THE 
:   RECEIVE STATE IS PROPERLY RESET ACCORDING TO WHICH BLOCK OF A 
:   MESSAGE IS CURRENTLY BEING PROCESSED.
:
        LO      BSCPTP
        LO      BSCRCV
        LO      BSCSRV
        LO      BSCCHR
        LO      BSCRRC
        LO      BSCEXC
CONPATCH(RPABT,,6)
        J       PA1PTR,,
CONPATCH(PA1PTR,,0F0)
        LHL     R5,RCVSTA,RL2,          :GET CURRENT RECEIVE STATE
        CLHI    R5,RCVLEAK-RSEG         :ARE WE IN LEAK STATE?
        JE      FXLK1                   :YES - RECOGNIZE MESSAGE END
        LHL     R3,RBBCHN,RL2,                  :GET START OF BUFFER CHAIN
                                                :CURRENTLY BEING WORKED WITH
        JAL     R5,PBBC,,                       :PUT IT BACK
        LB      RDEV,CDEV,RL,                   :GET CURRENT DEVICE
        CLHI    RDEV,0FF                        :IF RDEV = FF THEN NOTHING PUT
                                                :ON RCV Q YET
        JE      FLRCV3+6                        :SO DON'T FLUSH RCV Q
        RLCMD(RCV,RDEV,RDEV)                    :RELEASE WHAT IS ALREADY ON Q
                                        :AND WAITING FOR BLOCK TERMINATOR
        STM     R0,FLRCVS,,             :SAVE ALL REGISTERS FOR WORK
FLRCV1  PKCMD(RCV,RDEV,RDEV)            :NOW FLUSH THE RCV Q
        JE      FLRCV3                  :UNTIL EMPTY
        JLFS    FLRCV2                  :CONTROL COMMAND
        JAL     R5,PBBC,,               :IF DATA THEN FLUSH BUFFERS
FLRCV2  ADVCMD(RCV,RDEV,RDEV)
        J       FLRCV1                  :SEE IF MORE TO FLUSH
FLRCV3  LM      R0,FLRCVS,,             :GET BACK THE REGISTERS

:   RCV Q FLUSHED.  MAKE SURE STATE PROPER TO RECEIVE RETRANSMISSION.

        LHL     0F,STATE,RL,           :GET CURRENT FOREGROUND LINE STATE
        CHI     0F,SRCV-10000          :WAS LAST BLOCK AN ETB?
        JEFS    LWETB                   :YES SUPROCESSOR OKAY - LAST WAS ETB
        LHI     0F,ETXBIT              :NO - THIS WILL TRIGGER PROPER RESET
        J       RPDON8,,                :BACK TO SOURCE
LWETB   LIS     0F,0                    :MAKE RAD 0 SO STATE CHANGE IS PROPER
        J       RPDON8,,                :RETURN AND EXIT RECEIVE

:     MAKE SURE RECEIVE DRIVER IS PROPERLY EXITED WHEN REACH END OF 
:     MESSAGE BEING LEAKED.

FXLK1   LIS     RC,0                    :FORCE END OF MESSAGE WITH GOOD DATA OP
        LHI     0F,ETXBIT               :AND PROPER CONTROL BITS
        J       RPDON5,,

        FO      BSCEXC
        FO      BSCPTP
        FO      BSCRCV
        FO      BSCSRV
        FO      BSCEXC
        FO      BSCRRC
        FO      BSCCHR

CONPATCH(PA0PTR,,44)
FLRCVS  WS      10              :FOREGROUND REGISTER SAVE AREA

ENDPATCH(CHANGE HANDLING OF FORWARD ABORTS)
 ^L\,@