:---------------+--------------------------------------------------------------
: Interface	: xcom (x.75)
: Version	: 04.03/SOURCE
: Auther	: Hitoshi Obata
: Date		: 21 NOV. 1991
: Purpose	: To support international accessing from/to ins-p user.
: Function	: (1) Set up appropriate gateway macro for a call request
:		:     from ins-p dynamically, also convert the calling
:		:     address from 081... to 44068..., if the called dnic
:		:     does not match odnic.  In the slot tymfile, need to
:		:     set up the following gateway macro for all destination
:		:     dnics;
:
:  GATEWAY(DNIC,081"00"00"00"00"00"00"00"00"00"00"00"3Agateway_host#"3B"0D)
:
:		: (2) Convert called address from 44068... to 081...
:		:     for call request from over sea, and convert calling
:		:     address from 44068... to 081... for call accept from
:		:     over sea.
:		: (3) Convert called address from 081... to 44068...
:		:     for call accept from ins-p
: Generation	: This patch should be installed into only the gateway
:		: interfaces for ins-p.
:---------------+--------------------------------------------------------------
PATCH(911119,1700,Hitoshi Obata,PA0PTR,,2A)
 
:	>>>>>	The following supports function (1)   <<<<<
 
	BND	4
INSLST	BS	18			: GATEWAY LOGIN STRING SETUP AREA
INSADR	BS	2			: ADDRESS CONVERT WORK AREA
INSATL	BS	10
 
CONPATCH(PCR445-10,,6)
	J	PA1PTR,,
 
CONPATCH(PCR450-6,,6)
	J	PA1PTR+0E,,
 
CONPATCH(PA1PTR,,0D4)
	TBT	R1,RPOA.F,,
	JN	PCR445-6,,
	JFS	ING005
	LI	R8,GA.LIS,R2
 
ING005	XR	R2,R2			: SETUP A COPY OF GATEWAY LOGIN STRING
	LB	R4,,R8,R2		: GET BYTE FROM GATEWAY MACRO
	STB	R4,INSLST,R2		: STORE IT TO SETUP AREA
	AIS	R2,1			: COUNT UP
	CHI	R2,18			: COPY COMPLETE ?
	JN	ING005+2		: NO, THEN NEXT BYTE
	LA	R8,INSLST		: PROVIDE ADDRESS OF SETUP AREA
 
ING010	LHL	R7,IPORT,
	SLLS	R7,3			: R7 <-- INDEX FOR ADDRESS STORAGE
	LIS	R2,3			: R2 = COUNT FOR LOGIN STRINGS
	LIS	R12,2			: R12= BYTE COUNT FOR ADDRESS DIGITS
 
ING020	LB	R4,DTESAV,R7,R12	: GET 2 DIGITS INTO R4
	SRLS	R4,4			: CARE FOR UPPER DIGIT
	AHI	R4,30			: CONVERT TO ASCII
	STB	R4,,R8,R2		: STORE IT
	CLB	R2,DTESAV,R7,		: CONVERT COMPLETED FOR ALL DIGITS ?
	JE	ING030			: GO FOR CONVERT CALLING ADDRESS
	AIS	R2,1
 
	LB	R4,DTESAV,R7,R12	: GET 2 DIGITS INTO R4
	NHI	R4,0F			: CARE FOR LOWER DIGIT
	AHI	R4,30			: CONVERT TO ASCII
	STB	R4,,R8,R2		: STORE IT
	CLB	R2,DTESAV,R7,		: CONVERT COMPLETED FOR ALL DIGITS ?
	JE	ING030			: GO FOR CONVERT CALLING ADDRESS
	AIS	R2,1
 
	AIS	R12,1
	J	ING020			: GO FOR NEXT 2 ADDRESS DIGITS
 
ING030	LHL	R4,DTESAV+2,R7,		: COPY CALLING ADDRESS DIGIT 3 ~ 6
	STH	R4,INSADR
 
	L	R4,DTESAV+4,R7,		: GET REMAINING ADDRESS DIGITS
	SRLS	R4,8			: 
	ST	R4,DTESAV+4,R7,		: STORE IT +1 POSITION
 
	LB	R4,DTESAV,R7,		: GET ADDRESS LENGTH
	AIS	R4,2			: CONVERT ADDRESS LENGTH
	STB	R4,DTESAV,R7,		: RESTORE IT
 
	LHI	R4,44			: GET UPPER BYTE OF NIS DNIC
	STB	R4,DTESAV+1,R7,		: STORE IT
	LHI	R4,06			: GET LOWER BYTE OF NIS DNIC
	STB	R4,DTESAV+2,R7,		: STORE IT
 
	LB	R4,INSADR		: GET SAVED INS ADDRESS
	AHI	R4,70			: CONVERT 1? TO 8?
	STB	R4,DTESAV+3,R7,		: STORE IT
	LB	R4,INSADR+1		: GET REMAINING SAVED INS ADDRESS
	STB	R4,DTESAV+4,R7,		: STORE IT
 
	J	PCR450,,		: GO FOR LOGIN
 
:	>>>>>	The followings support function (2)   <<<<<
 
					: PART 1
CONPATCH(CRQ300-42,,6)
	J	PA1PTR,,
 
CONPATCH(PA1PTR,,12)
	JAL	R8,ING040		: CONVERT ADDRESS FOR CALL PACKET
	LB	R0,PFXCLL,		: R0 <-- CALLING ADDRESS LENGTH
	LB	R8,PFXCLD,		: R8 <-- CALLED ADDRESS LENGTH
	J	CRQ300-3A,,		: RETURN TO SOURCE
 
CONPATCH(ESP912-48,,6)
	J	PA1PTR,,
CONPATCH(PA1PTR,,58)
	JAL	R8,ING040		: CONVERT ADDRESS FOR CALL PACKET
	LB	R0,PFXCLL,		: R0 <-- CALLING ADDRESS LENGTH
	LB	R8,PFXCLD,		: R8 <-- CALLED ADDRESS LENGTH
	J	ESP912-40,,		: RETURN TO SOURCE
 
ING040	L	R0,PFXCLD,
	NI	R0,0FFFFF0
	CI	R0,440680		: CHECK CALLED ADDRESS
	JEFS	ING050			: GO FOR CALLED ADDRESS
	JNR	R8			: IF NOT 44068, THEN RETURN
 
ING050	LB	R0,PFXCLD,		: GET CALLED ADDRESS LENGTH
	SIS	R0,2			: LENGTH - 2
	STB	R0,PFXCLD,		: STORE IT
	LHI	R0,08			: BEGINING 2 DIGITS OF INS ADDRESS
	STB	R0,PFXCLD+1,		: STORE IT
	LB	R0,PFXCLD+3,		: GET 8X
	SHI	R0,70			: CONVERT 8X TO 1X FOR 081X
	STB	R0,PFXCLD+2,		: STORE IT
	LB	R0,PFXCLD+4,		: GET NEXT TWO DIGITS
	STB	R0,PFXCLD+3,		: STORE IT
	L	R0,PFXCLD+4,		: GET REMAINING ADDRESS
	SLLS	R0,8			: DROP FIRST BYTE
	ST	R0,PFXCLD+4,		: STORE IT
	JR	R8
 
					: PART 2
CONPATCH(ESP12D-0E,,6)			: CONVERT CALLING ADDRESS FROM
	J	PA1PTR,,		: 44068... TO 081... FOR
					: CALL ACCEPT FROM OVER SEA AS BELOW..
CONPATCH(PA1PTR,,28)
	LHL	R1,DIBUF,,		: COPY ADDRESS LENGTH FIELD
	JAL	R4,GCI,,
	CHI	R0,0			: CHECK IF IT IS 0
	JNFS	ING105			: IF LENGTH > 0
	LHL	R1,FACBUF,,		: IF LENGTH = 0
	JAL	R4,WCI,,		: INTO FACBUF
 
ING105	STB	R0,INSATL		: INTO INSATL
	J	ESP12D,,
 
CONPATCH(ESP12I-6,,6)
	J	PA1PTR,,
CONPATCH(PA1PTR,,0FC)
	CLR	R5,R4
	JG	ESPCL2,,
 
	LA	R6,1,R5			: PROVIDE ADDRESS PART OF CALL
	LIS	R9,1			: ACCEPT PACKET INTO INSATL
ING110	JAL	R4,GCI,,
	STB	R0,INSATL,R9
	AIS	R9,1
	SIS	R5,1
	JNBS	ING110
 
	LB	R0,INSATL		: GET ADDRESS LENGTH FIELD
	SHI	R0,20			: CONVERT CALLING ADDRESS LENGTH
	STB	R0,INSATL		: RESTORE IT
 
	LR	R1,R0			: COPY IT
 
	NHI	R1,0F			: GET CALLING ADDRESS BYTE POSITION
	LR	R5,R1
	AIS	R1,2			: INTO R1
	SRLS	R1,1
 
	LB	R9,INSATL,R1		: SETUP BEGINING OF CALLING ADDRESS
	SLL	R9,10			: FOR CHECKING IF IT SHOULD BE
	LB	R4,INSATL+1,R1		: HANDLED OR NOT ...
	SLLS	R4,8			:
	OR	R9,R4			:
	LB	R4,INSATL+2,R1		:
	OR	R9,R4			:
	THI	R5,1			: R5 HAS CALLED ADDRESS LENGTH
	JNFS	ING120			: IF ODD LENGTH
	SRLS	R9,4			: R9 <-- 00044068
ING120	NI	R9,0FFFFF
	CI	R9,44068		: CHECK IF CALLING IS 44068...
	JE	ING125			: IF YES, GO FOR OUR JOB
 
					: RECOVERY TO BACK TO SOURCE BELOW
	AHI	R0,20			: CALCULATE ORIGINAL ADDRESS LENGTH
	LHL	R1,FACBUF,,		: GET BUFFER ADDRESS
	JAL	R4,WCI,,		: WRITE IT TO FACBUF
	J	ESP12I,,		: BACK TO SOURCE, SINCE NOT OUR JOB
 
ING125	THI	R5,1			: R5 HAS CALLED ADDRESS LENGTH
	JN	ING130			: IF ODD LENGTH
 
	LHI	R9,08			: IF EVEN CALLED ADDRESS LENGTH
	STB	R9,INSATL,R1		: STORE 08
	LB	R9,INSATL+2,R1
	SHI	R9,70
	STB	R9,INSATL+1,R1		: STORE 1X
	J	ING140
 
ING130	LB	R9,INSATL,R1		: GET FIRST CALLING ADDRESS BYTE
	NHI	R9,0F0			: CONVERT IT FOR INS ADDRESS
	STB	R9,INSATL,R1		: RESTORE IT
	LHI	R9,81			: SET 81
	STB	R9,INSATL+1,R1		: STORE IT
 
ING140	AHI	R0,20			: USE ORIGINAL CALLING ADDRESS LENGTH
	THI	R0,10			: CHECK CALLING ADDRESS LENGTH
	JEFS	ING145			: IF EVEN LENGTH
 
	AHI	R0,10			: IF ODD LENGTH,
	SRLS	R0,5			: BYTE LENGTH = (CLGADL+1)/2-3
	SIS	R0,3
	JFS	ING150			: GO FOR MOVE REMAININGS
 
ING145	SRLS	R0,5			: BYTE LENGTH = CLGADL/2-3
	SIS	R0,3
	THI	R5,1			: TEST CALLED ADDRESS LENGTH
	JEFS	ING150			: IF IT IS ALSO EVEN LENGTH
	AIS	R0,1			: IF ODD CALLED ADDRESS LENGTH
 
ING150	LB	R9,INSATL+3,R1		: MOVE REMAINING CALLING ADDRESS
	STB	R9,INSATL+2,R1
	AIS	R1,1
	SIS	R0,1
	JNBS	ING150
 
	SIS	R6,1			: CONVERT BYTE LENGTH TO WRITE
	LHL	R1,FACBUF,,		: SET BUFFER POINTER TO R1
	LIS	R9,0			: INI POINTER FOR INSATL
ING160	LB	R0,INSATL,R9		: R0 <-- DATA TO BE MOVED
	JAL	R4,WCI,,		: MOVE IT TO FACBUF
	AIS	R9,1			: POSITION COUNT UP
	SIS	R6,1			: JOB COMPLETED ?
	JNBS	ING160			: NO, THEN GO FOR NEXT CHARACTER
 
	J	ESP120,,
 
:	>>>>>	The following supports function (3)   <<<<<
 
CONPATCH(RTCALC,,6)
	J	PA1PTR,,
 
CONPATCH(PA1PTR,,0B2)
	LB	R1,,R5			: R1 <-- ADDRESS LENGTH FIELD
	CHI	R1,0			: CHECK IF THERE IS ADDRESS FIELD
	JE	ING100			: IF 0 LENGTH, THEN END OF JOB
	NHI	R1,0F			: CARE FOR CALLED ADDRESS
	LR	R4,R1			: COPY TO R4
	SRLS	R1,1			: CONVERT DIGIT COUNT TO BYTE COUNT
	AIS	R1,1			: R1 HAS BIAS FOR CALLED ADDRESS
 
	LB	R7,,R5,R1		: GET 1ST. BYTE FOR CALLING ADDRESS
	SLL	R7,10			: SHIFT IT 16 TIMES
	AIS	R1,1			: COUNT UP
	LB	R13,,R5,R1		: GET 2ND. BYTE FOR CALLING ADDRESS
	SLLS	R13,8			: SHIFT IT 8 TIMES
	OR	R7,R13			: COMBINE
	AIS	R1,1			: COUNT UP
	LB	R13,,R5,R1		: GET 3RD. BYTE FOR CALLING ADDRESS
	OR	R7,R13			: COMBINE
					: NOW R7 HAS '00X4406X' or
					:            '004406XX'
	THI	R4,1			: TEST CALLED ADDRESS LENGTH
	JNFS	ING070			: IF ODD LENGTH
	SRLS	R7,4			: IF EVEN LENGTH
ING070	SRLS	R7,4			: NOW  R7 HAS '000X4406'
	NI	R7,0FFFF		: CLEAR UPPER HALF WORD
	CHI	R7,4406			: CHECK IF IT IS NIS DNIC
	JE	ING100			: YES, THEN GO FOR END JOB
 
	LR	R1,R6			: GET LENGTH TO R1 FOR BYTE GET
	LR	R4,R6			: GET LENGTH TO R4 FOR BYTE PUT
	AIS	R4,1			: BIAS TO PUT BYTE
ING080	SIS	R1,1			: DECRIMENT COUNTER
	JLE	ING090			: GO, IF MOVE COMPLETED
	SIS	R4,1			: UPDATE BYTE PUT POINTER
	LB	R7,,R5,R1		: GET DATA TO R7
	STB	R7,,R5,R4		: PUT IT
	J	ING080			: GO FOR NEXT BYTE
 
ING090	LIS	R1,3			: CONVERT 1X TO 8X
	LB	R7,,R5,R1		: GET 1X
	AHI	R7,70			: CONVERT TO 8X
	STB	R7,,R5,R1		: RESTORE IT
	SIS	R1,1			: DECRIMENT PUT POINTER
	LHI	R7,6			: SET 06 TO R7
	STB	R7,,R5,R1		: STORE IT
	SIS	R1,1			: DECRIMENT PUT POINTER
	LHI	R7,44			: SET 44 TO R7
	STB	R7,,R5,R1		: STORE IT
	LB	R7,,R5			: GET ADDRESS LENGTH FIELD
	AIS	R7,2			: CALLED ADDRESS LENGTH +2
	STB	R7,,R5			: RESTORE IT
	AIS	R6,1			: DATA LENGTH TO BE HANDLE +1 BYTE
 
ING100	LB	R1,PACKET,,
	CLHI	R1,YCALA
	JE	RTCALC+8,,		: JOB COMPLETED, SO RETURN TO SOURCE
 
ENDPATCH(SUPPORT INTERNATIONAL ACCESSING FROM/TO INS-P USER)
    