             
        SUBTTL  EXTENDED DDT ROUTINES

        SEG   A.CODE
        MO    .,STATUS
DECB.3  EQ    032A
DECB.9  EQ    092A
HEXB.3  EQ    0330
HEXZ.4  EQ    0450
HEXB.5  EQ    0530
HEXZ.5  EQ    0550
HEXZ.8  EQ    0850
HEXB.9  EQ    0930
HEXB.A  EQ    0A30
        SEG   A.DATA
PRICNT  HS    1
        SEG   A.CODE
        DS.CMD(ZZ,DS.EXI)     :LOGOFF WITH ZZ
        DS.CMD(\,DDTNOP)
DDTNOP  J     DSTART
        DS.CMD(HELP,DDTHELP)
DDTHELP HS    0
        LA    R1,HLPDAT
DDTHL1  HS    0
        LB    R0,0,R1
        JE    DDTHL9
        SVC   OUT,0,R1
        AR    R1,R0
        AIS   R1,1
        JBS   DDTHL1
DDTHL9  J     DDTNOP
HLPDAT  EQ    .
        SC    /"8D"8A                EXTENDED DDT HELP LIST"8D"8A/
        SC    /DIR     DISPLAY ISIS IRING"8D"8A/
        SC    /DOR     DISPLAY ISIS ORING"8D"8A/
        SC    /HELP    PRINT THIS LIST"8D"8A/
        SC    /QUIT    LOG OUT OF EXTENDED DDT"8D"8A/
        SC    /ZZ      LOG ALL THE WAY OUT OF DDT"8D"8A/
        BC    0
        HS    0

        EM
	SUBTTL	STATUS ROUTINES FOR TINET / ISIS RING INTERPRETER
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::	ISIS RING INTERPERTER					::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::								::
::	This package will decode ISIS dispatcher rings and	::
::	display them on a DDT port.  Messages thas may contain	::
::	meaningful ASCII text (data, needles, and 1DOWN) are	::
::	displayed in hex and ASCII.  All other messages are	::
::	displayed only in hex.					::
::								::
::	Requirments:						::
::		This code requires ISIS-II version 5 (or above)	::
::		and the STAT.LIB library.  It uses the message	::
::		length tables in segment F (15d) in ISIS.	::
::								::
::	Commands:						::
::		This package includes 4 commands.  With this	::
::		set of commands you may examine rings that	::
::		have, and have not wrapped.  Also any output	::
::		from these commands may be terminated by typing	::
::		any character ("\" is recomended).  All 	::
::		commands may be followed by an optional number.	::
::		This number represents the number of seconds	::
::		to wait looking for new ring activity.  This	::
::		may beused to observe rings for N seconds, in	::
::		'real time'.					::
::								::
::	DIR	Dispatcher Input Ring.  This command will 	::
::		decode the ISIS input ring (IRING) from the 	::
::		start of the ring to the NFMI (next fill 	::
::		message index).					::
::	DOR	Dispatcher Output Ring.  Same as DIR for ORING.	::
::	WIR	Wrapped dispatcher Input Ring.  This command	::
::		will start decoding at NFMI and work it's way	::
::		around the ring and back to NFMI.		::
::	WOR	Wrapped dispatcher Output Ring.  Same as WIR	::
::		for ORING.					::
::								::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:
        SEG     A.CODE
        MO      .,STATUS
LENGTH	EQ	0F0028		:SEG E AND SEG F DATA AREAS
LP0LST	EQ	0F0026
NPORTS	EQ	0E0082
IRINGP	EQ	0E0068		:CONTAINS START OF INPUT RING
ORINGP	EQ	0E006C		:CONTAINS START OF OUTPUT RING
IMAXI	EQ	0E0084		:CONTAINS INPUT RING SIZE (HALFWORD)
OMAXI	EQ	0E0086		:CONTAINS OUTPUT RING SIZE (HALFWORD)
RING	EQ	4		:4 BYTES PAST 1ST POINTER IS RING
NFMI	EQ	0		:FILL POINTER

	DS.CMD(DIR,XDIR)		:DISPATCHER INPUT RING
	DS.CMD(DOR,XDOR)		:DISPATCHER OUTPUT RING
	DS.CMD(WIR,XWIR)		:WRAPPED DISP INPUT RING
	DS.CMD(WOR,XWOR)		:WRAPPED DISP OUTPUT RING

	SEG	A.CODE

:	DUMP I/O RINGS
:
RR	EQ	8		:REGISTER ADDRESS OF RING
RS	EQ	9		:REGISTER RING SIZE

:	R0  - SCRATCH
:	R1  - INDEX INTO RING
:	R10 - LINK TO SUBROUTINES
:	R12 - FLAG FOR PRINTING/NOT PRINTING
:

:
XDIR	HS	0
	LIS	R0,0		:SET TO NOT WRAPPED
	JFS	XDR020
XDOR	HS	0
	LIS	R0,0		:SET TO NOT WRAPPED
	JFS	XDR030
XWOR	HS	0
	LIS	R0,1		:SET TO WRAPPED
	JFS	XDR030
XWIR	HS	0
	LIS	R0,1		:SET TO WRAPPED

XDR020	LA	RR,IRING,,	:HANDLE IRING
	LHI	RS,IRSIZE	:RING SIZE
	JFS	XDR040
XDR030	LA	RR,ORING,,	:HANDLE ORING
	LHI	RS,ORSIZE	:RING SIZE
XDR040	STH	R0,XDRWFL,,	:SET WRAP/NO WRAP FLAG (FROM ABOVE)
:	GET A NUMBER ?
	LIS	R0,0		:CLEAR ACCUMULATOR
	LHI	R1,008D		:GET A <CR>
	CLB	R1,DS.DLM,,	:DELIMETER CHAR = <CR> ?
	JEFS	XDR060		:YES, DO NOT EXPECT A NUMBER (OF SECONDS)
	LHI	R4,$A 10	:SET RADIX TO DECIMAL
	JAL	R5,DS.NUM	:GET A NUMBER (IN R0)

XDR050	HS	0
XDR060	A	R0,SLOWC,,	:ADD CURRENT TIME
	ST	R0,XDRSEC,,	:SAVE TIME TO QUIT
	LIS	R1,0		:ASSUME START AT BEG OF RING
	LH	R2,XDRWFL,,	:DO WE KNOW IT WRAPPED ??
	JE	XDR0A0		:IF NOT
	LH	R1,NFMI,RR	:USE OLDEST ENTRY
	SVC	0B,XDCRLF,,	:NEW LINE
	J	XDR0A4

:	"CONTINUE" AT NEXT MESSAGE
XDR090	AIS	R1,3		:ROUND UP TO FULL WORD
	NHI	R1,-4		:AND I.E., NEXT MESSAGE
	CR	R1,RS		:TO END OF RING ??
	JLFS	XDR0A0		:IF NOT
	SR	R1,RS		:FOLD TO START OF RING
XDR0A0	SVC	0B,XDCRLF,,	:CR LF
XDR0A2	SVC	IN,0		:LOOK FOR A TYPED CHARACTER
	 J	XDR0A3		:NO CHARACTER, CONTINUE
	 J	DDTNOP		:CHARACTER TYPED, EXIT TO PROMPT
XDR0A3	HS	0
	CLH	R1,NFMI,RR	:CAUGHT UP ?
	JNFS	XDR0A4		:NOT YET
	L	R0,XDRSEC,,	:TIME TO END THIS 
	CL	R0,SLOWC,,	:COMPARE TO ENDING SECOND
	JL	DDTNOP		:YES, RETURN TO DDT
	SVC	DISMIS,0	:DISMISS A BIT
	J	XDR0A2		:WATCH FOR A CHANGE IN RING
XDR0A4	LB	R2,RING+2,R1,RR	:GET MESSAGE CODE
	LHL	R3,RING,R1,RR	:GET PORT #
	JE	XDR0C0		:IF INTRANODE MESSAGE
:	CHECK FOR A VALID PORT #, KEEP INCRIMENTING TIL FOUND
	CLH	R3,NPORTS,,	:TEST AGAINST MAX PORT #
	JLEFS	XDR0A5		:OK, CONTINUE
	AIS	R1,4		:MOVE TO NEXT POSSIBLE PORT
	JBS	XDR0A4		:LOOP LOOKING FOR A VALID PORT #
:	PORT NUMBER IS VALID
XDR0A5	LIS	R12,1		:DEFAULT PRINTING ON <*>
	LR	R2,R2		:CHECK FOR NEEDLE
	JE	XDR0F0		:IF SO
	CLHI	R2,9E		:DATA MESSAGE ??
	JL	XDR0B0		:IF SO
	JAL	R10,XPRADD	:PRINT ADDRESS
	SHI	R2,9E		:BIAS TO 0
	LA	R4,,R2,R2	:FOR INDEXING
	SVC	0B,XDRICA,R4,R4	:ASCII MESSAGE LABEL
	LIS	R12,0		:DO NOT PRINT ISIS CONTROL MESSAGES IN ASCII <*>
	JAL	R10,XDRISB	:GO DUMP ISIS CONTROL MESSAGE
	J	XDR090		:GO TO NEXT MESSAGE

XDR0B0	HS	0
	JAL	R10,XPRADD	:PRINT ADDRESS
	SVC	0B,XDRMS3,,	:"DATA" MESSAGE HEADER
	JAL	R10,XDRISA	:GO DUMP ISIS DATA MSG
	J	XDR090		:GO TO NEXT MESSAGE
XDR0C0	HS	0
	JAL	R10,XPRADD	:PRINT ADDRESS
	LA	R4,,R2,R2	:FOR INDEXING
	SVC	0B,XDRICB,R4,R4	:ASCII MESSAGE LABEL
	TBT	R2,XDRVL,,	:VARIABLE LENGTH MESSAGE ??
	JNFS	XDR0D0		:IF SO BECAUSE CAN'T HANDLE YET
	LIS	R12,0		:DO NOT PRINT CONTROL MESSAGE <*>
	JAL	R10,XDRISC	:GO DUMP ISIS INTRANODE MESSAGE
	J	XDR090		:GO TO NEXT MESSAGE
XDR0D0	LIS	R12,1		:<*> SET TO PRINT
	CLHI	R2,8		:AUX CIRCUIT REQUEST ??
	JN	XDR0E0		:MUST BE "1-DOWN"
	LA	R4,0A,R1	:STEP TO SIZE BYTE
	CR	R4,RS		:CHECK FOR WRAP AROUND
	JLFS	XDR0D4		:IF NOT
	SR	R4,RS		:IF SO
XDR0D4	LB	R6,RING,RR,R4	:GET VARIABLE STRING SIZE
	AIS	R6,0B		:ADD CONSTANT PORTION
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E
	JAL	R10,XDRISE,,	:TO PUT OUT MESSAGE
	J	XDR090
XDR0E0	LA	R4,5,R1		:STEP TO 1-DOWN STRING SIZE
	CLHI	R4,RS		:CHECK FOR WRAP AROUND
	JLFS	XDR0E4		:IF NOT
	SHI	R4,RS		:IF SO
XDR0E4	LB	R6,RING,RR,R4	:GET VARIABLE MESSAGE SIZE
	AIS	R6,6		:ADD FIXED MESSAGE LENGTH
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E
	JAL	R10,XDRISE,,	:TO PUT OUT MESSAGE
	J	XDR090		:TO CONTINUE

XDR0F0	HS	0
	JAL	R10,XPRADD	:PRINT ADDRESS
	SVC	0B,XDRMS4,,	:NEEDLE MESSAGE
	LB	R6,RING+3,R1,RR	:GET ADDITIONAL LENGTH
	AIS	R6,4		:ADD FIXED PORTION
	LHI	R0,20		:INSERT A BLANK
	SVC	KIO,0E		:PUT IT OUT
	JAL	R10,XDRISE,,	:TO PUT REST OF MESSAGE
	J	XDR090

CAPIT	TBT	R0,CAPITT,,	:TEST FOR LOWER CASE CHARACTER
	JER	R1		:IF NOT
	SHI	R0,20		:ADJUST TO CAPITALIZE
	JR	R1		:RETURN


:	R1 - RING INDEX
:	R2 - MSG CODE TYPE
:	R3 - PORT #
:	R4 - SCRATCH
:	R5 - BYTE TO OUTPUT
:	R6 - SCRATCH
:	R7 - LINE LENGTH COUNTER
:	RS - RING SIZE  (R8)
:	RR - RING START (R9)
:	R10- LINK TO HERE
:	R11- LINK TO XDPUT

:	DATA MESSAGE
XDRISA	LA	R6,3,R2		:MESSAGE LENGTH=MESSAGE TYPE+3
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E		:LETS BE TIDY
	J	XDRISE,,,
:	CONTROL MESSAGE
XDRISB	LB	R6,LENGTH+9E,R2,:MESSAGE LENGTH FROM TABLE (IN SEG F)
	AIS	R6,2
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E
	J	XDRISE,,,
:	INTRANODE MESSAGE TYPE
XDRISC	LHL	R6,LP0LST,,	:SEG F HAS THIS TOO
	LB	R6,NRATE,R6,R2,	:MESSAGE LENGTH FROM TABLE
	AIS	R6,2
	LHI	R0,20		:INSERT A SPACE
	SVC	KIO,0E
	J       XDRISE
XDRISD	HS	0
	SVC	0B,XDRASC,,	:ASCII EQUIVALENT OF LINE
	SVC	0B,XDCRLF,,	:NEW LINE
	ST	R10,SAVR10,,
	JAL	R10,XPRADD	:PRINT ADDRESS :*:
	L	R10,SAVR10,,
	SVC	0B,XDRMS5,,	:4 BLANKS FOR ALIGNMENT
XDRISE	LIS	R7,0		:LINE LENGTH COUNTER
XDRISF	LB	R0,RING,R1,RR	:NEXT BYTE FROM RING
	LR	R5,R0		:SAVE A GOOD COPY OF IT
	NHI	R0,7F		:IGNORE MSB
	TBT	R0,XDRECH,,	:PRINTABLE ??
	JNFS	XDRISH		:YES, GET ORIG. BYTE BACK
	LHI	R0,2E		:DEFAULT "." CHARACTER
	JFS	XDRISH+2	:SET CHAR TO "."
XDRISH	LR	R0,R5		:ELSE IF OK TO PRINT IT
:XDRISH+2
	LR	R4,R7		:COMPUTE WHERE TO PLUG INTO LINE
	NHI	R4,0F		:16 BYTES PER LINE
	STB	R0,XDRASC+4,R4,,:PUT 'ER THERE
	JAL	R11,XDPUT,,	:PUT IT OUT
	AIS	R1,1		:BUMP RING INDEX
	CR	R1,RS		:END OF RING ??
	JLFS	XDRISG		:IF NOT
	SR	R1,RS		:FOLD TO RING START
XDRISG	AIS	R7,1		:LINE LENGTH
	SIS	R6,1		:CHECK FOR END OF MSG
	JLE	XDRISI		:FINISH BLANKING AND PRINT	
	THI	R7,0F		:END OF LINE
	JE	XDRISD		:IF SO
	THI	R7,1		:END OF HALFWORD
	JN	XDRISF		:IF NOT TO CONTINUE
	LHI	R0,20		:ADD A SPACE
	SVC	KIO,0E		:TO FORMAT WORDS
	J	XDRISF
XDRISI	LHI	R0,20		:BLANK
	LR	R12,R12		:PRINT DATA ? (1=YES)
	JER	R10		:NO, RETURN
XDRISJ	NHI	R7,0F		:LINE LENGTH OF 16
	JEFS	XDRISK		:IF TO END OF LINE
	STB	R0,XDRASC+4,R7,,:PUT IN A BLANK
	SVC	0B,XD2BLK,,	:PRINT 2 BLANKS TO ALLIGN DATA
	THI	R7,1		:ODD ?
	JNFS	XDRISL		:YES, DO NOT PRINT BLANK
	SVC	KIO,0E		:PRINT A BLANK (REG 0)
XDRISL	HS	0
	AIS	R7,1		:COUNT ON UP
	JBS	XDRISJ		:AND SEE IF DONE
XDRISK	SVC	0B,XDRASC,,	:YES, PUT IT OUT
	JR	R10		:DONE



:	R0 USED BY SVC FOR OUTPUT CHARACTER
:	R1-R3 SAVED
:	R4 DESTROYED
:	R5 BYTE TO BE OUTPUT
:	R11 LINK
XDPUT	LBR	4,5		:COPY IT
	SRHLS	4,4		:LEFT NIBBLE
	LB	0,SIAASC,4,	:CONVERT TO ASCII ("0" TO "F")
	SVC	KIO,0E		:PUT IT OUT TO TTY
	NHI	5,0F		:RIGHT NIBBLE
	LB	0,SIAASC,5,	:CONVERT TO ASCII ("0" TO "F")
	SVC	KIO,0E		:PUT IT OUT TO TTY
	JR	R11		:RETURN
:
:	WRITE ADDRESS AT START OF DATA/MESSAGE/NEEDLE LINE
:
:	R10 - LINK TO THIS ROUTING
:	ALL OTHERS PRESERVED!
:
XPRADD	HS	0
	STM	R0,XDSAV,,
	LA	R0,RING,R1,RR		:GET ADDR OF THIS MESSAGE
	LHI	R1,HEXB.5
	SVC	KIO,$A10
	LHI	R0,0020			:PRINT BLANK
	SVC	KIO,$A14
	LM	R0,XDSAV,,
	JR	R10

	SUBTTL	ISIS RING INTERPRETER (DATA AREAS)
	SEG	0
XDRSS0	HS	0
XDRPLU	SC	/"8D"8A"2B/		:<CR>, <LF>, "+"
SIAASC	AC	/0123456789ABCDEF/
CAPITT	HC	0,0,0,0,0,0,7FFF,0FFE0
XDRECH	HC	0,0,0FFFF,0FFFF,0FFFF,0FFFF,0FFFF,0FFFE
XDCRLF	SC	/"8D"8A/	:<CR>, <LF>
XD2BLK	SC	/  /		:TWO BLANKS
XDRVL	HC	0082,0000	:VARIABLE LENGTH MESSAGE FLAGS
XDRMS5	SC	/    /
XDRMS4	SC	/NDL/		:NEEDLE
XDRMS3	SC	/DAT/		:DATA
XDRMS2	SC	/"8D"8ARING EMPTY"8D"8A/
XDRASC	SC	/  |                |/
XDRSEC	HS	2		:SLOWC TIME TO END TRACE
XDRCEI	HS	1		:OUR CEI
XDRWFL	HS	1		:USER SAYS RING WRAPPED ALREADY
XDSAV	HS	2*10		:REG SAVE AREA
SAVR10	HS	2		:REG 10 SAVE AREA

:	ISIS CONTROL MESSAGES
XDRICA	HS	0
	SC	/DET/	:DETACH MESSAGE TYPE
	SC	/ZAP/	:DISCONNECT MESSAGE
	SC	/NOS/	:APPLY BACK-PRESSURE (NO SEND)
	SC	/SND/	:RELEASE BACK-PRESSURE (SEND)
	SC	/ICM/	:FLUSH OUTPUT (GOBBLER)
	SC	/BKG/	:FLUSH INPUT (BACK GOBBLER)
	SC	/BLK/	:DATA LOST IN THIS DIRECTION (BLACK BALL)
	SC	/GRY/	:DATA LOST IN OPPOSITE DIRECTION (GREY BALL)
	SC	/EDE/	:ENTER DEFERED ECHO MESSAGE
	SC	/LDE/	:LEAVE DEFERED ECHO MESSAGE
	SC	/ETM/	:ENTER TRANSPARENCY MODE
	SC	/LTM/	:LEAVE TRANSPARENCY MODE
	SC	/GB /	:GREEN BALL
	SC	/RB /	:RED BALL
	SC	/YB /	:YELLOW BALL
	SC	/OB /	:ORANGE BALL
	SC	/BRK/	:BREAK DETECTED
	SC	/HNG/	:HANG UP
	SC	/QTP/	:QUERY TERMINAL PARAMETER
	SC	/STP/	:SET TERMINAL PARAMETER
	SC	/PSN/	:PSEUDO NEEDLE
	SC	/NLC/	:NORMAL LOGON CHAR
	SC	/NLS/	:NORMAL LOGON STATUS
	SC	/LOF/	:LOG ON FAILURE
	SC	/NCC/	:NORMAL CIRCUIT COMPLETE
	SC	/ADA/	:ADDENDUM TO ACCOUNTING
	SC	/SHG/	:SUPER-HANG UP
	SC	/TLM/	:SET TRANSMIT LIMIT
	SC	/EBK/	:END OF BREAK
	SC	/ZAK/	:ZAP ACK
	SC	/EAD/	:ENTER ALTERNATE OUTPUT DEVICE MODE
	SC	/LAD/	:LEAVE ALTERNATE OUTPUT DEVICE MODE
	SC	/ZAR/	:ZAP WITH REASON
	SC	/SIX/	:START INTERFACE INFORMATION EXCHANGE
	SC	/TIX/	:TERMINATE INTERFACE INFORMATION EXCHANGE

:	INTRA NODE MESSAGES
:	-------------------

XDRICB	HS	0
	SC	/RQR/	:RESTART REQUEST
	SC	/RST/	:RESTART INTERFACE
	SC	/NTO/	:NODE HAS BEEN TAKEN OVER
	SC	/REP/	:REPORT TO SUPERVISOR'S LOG
	SC	/RHS/	:REPORT HOST STATUS (OBSOLETE)
	SC	/RAC/	:REPORT ACCOUNTING
	SC	/TIM/	:GMT TIME
	SC	/RNP/	:REQUEST FOR NORMAL PSEUDO NEEDLE
	SC	/RAP/	:REQUEST AUX PSEUDO-NEEDLE
	SC	/PSR/	:PSEUDO-NEEDLE REJECTED
	SC	/HPA/	:HOST PORT AVAILABILITY
	SC	/HNA/	:HOST NOT ACCEPTABLE
	SC	/RHC/	:REPORT HOST COST
	SC	/NSU/	:NO SUPERVISOR
	SC	/ODN/	:1-DOWN TEXT
	SC	/RAH/	:REPORT ALL HOSTS
	SC	/HSR/	:HOST STATUS REPORT



	EM		:END OF STATUS MO

    