CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C PROGRAM: AVAIL.FTF
C AUTHOR: JO ANN JOELS
C DATE: AUGUST, 1991
C
C THIS PROGRAM WAS WRITTEN FOR GARY WALKER TO COMPUTE STATISTICS
C ON NETWORK AVAILIBILITY FOR ANY ONE GIVEN MONTH.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        INTEGER RCOUNT(23),PCTILE(3),
     +          PCREC(3),MINAV,MAXAV,INITT,LAST,NUMDB,
     +          DBASE(50,5),NUMREC,SDATE(2),EDATE(2),SMONTH,SYEAR,
     +          NUMHST,NUMDAY,AVHRS,MONTBL(12),DUPCMD(14),CURDB(5),
     +          HSTNAM(5),HSTCMD(10),CNODE,ONEPC,TOTNOD,RECNO,
     +          WORSTT(10),OUTNAM(3),RANGE,WORSTD(10,5),IDATE(2),
     +          WORSTO(10,2),WORSTP,WORSTC(10,3),CNAM(3),PROD,COC(2)

        REAL RFREQ(23),RMEAN(23),WORSTE(10),PCAVAL(3),RANGES(23,2),
     +       UPTIME,TAVAIL,DEV,SUMDEV,SD,DEVSQ,RAVAIL(23),AVNHRS

        DATA RANGES/0.,72.01,240.01,408.01,576.01,600.01,624.01,648.01,
     +              672.01,720.01,731.01,732.01,733.01,734.01,735.01,
     +              736.01,737.01,738.01,739.01,740.01,741.01,742.01,
     +              743.01,72.,240.,408.,576.,600.,624.,648.,672.,720.,
     +              731.,732.,733.,734.,735.,736.,737.,738.,739.,
     +              740.,741.,742.,743.,744./

        DATA MONTBL/31,28,31,30,31,30,31,31,30,31,30,31/

        CALL DBSTRT(1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
     +          1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
     +          1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
     +          1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
     +          1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0)

        NUMRNG = 23
        NUMDB = 0
        AVGAV = 0
        COMFRQ = 0
        INITT = 0
        LAST = 0
        NUMREC = 0


C INIT THE ARRAYS 
        DO 100 I = 1,NUMRNG
        RCOUNT(I) = 0
        RAVAIL(I) = 0
        RFREQ(I) = 0
        RMEAN(I) = 0
100     CONTINUE

        PCTILE(1) = 90
        PCTILE(2) = 95
        PCTILE(3) = 99





C       CCCCC
C       C OPEN THE DATA BASE LIST FILE AND READ ALL OF THE
C       C DATA BASE NAMES THAT WILL BE SEARCHED FOR THE
C       C TICKET INFORMATION
C       CCCCC

        OPEN(21,'AVAIL.DBS',INPUT, ERR = 910)
        DO 150 I=1,50
                READ(21,120,END = 155)(DBASE(I,J),J=1,5)
120             FORMAT(5A5)
                NUMDB = NUMDB+1
150     CONTINUE
155     CLOSE(21)

C       CCCCC
C       C OPEN THE 1022 DATA BASE CONTAINING
C       C THE NUMBER OF NODES IN THE NETWORK FOR EACH MONTH
C       CCCCC

        CALL DBOPEN('HSTMNT')

C       CCCCC
C       C PROMPT FOR THE START DATE AND END DATE
C       CCCCC
160     TYPE 165
165     FORMAT(1X,'ENTER START DATE(MM/DD/YYYY): ',$)
        ACCEPT 170,SDATE
170     FORMAT(2A5)

        TYPE 175
175     FORMAT(1X,'ENTER ENDDATE(MM/DD/YYYY): ',$)
        ACCEPT 170,EDATE

C       CCCCC
C       C GET A LIST OF HOST NUMBERS TO SELECT FOR
C       CCCCC
C176     TYPE 177
C177     FORMAT (1X,'ENTER HOST FILENAME: ',$)
C        ACCEPT 178,HSTNAM
178     FORMAT(5A5)

C       CCCCC
C       C FROM THE START DATE, DETERMINE THE MONTH AND
C       C YEAR. THIS INFORMATION WILL BE USED TO DETERMINE
C       C THE NUMBER OF NODES AND DAYS IN A MONTH.
C       CCCCC

180     DECODE(10,185,SDATE)SMONTH,SYEAR
185     FORMAT(I2,4X,I4)

C       CCCC
C       C FIND THE NUMBER OF NODES FOR THIS MONTH
C       CCCCC
190     CALL DBFIND('YEAR','EQ',SYEAR,'AND','MONTH','EQ',SMONTH)
        CALL DBGREC($900)
        CALL DBVAL('NODES',TOTNOD)
        CALL DBCLOSE

C       CCCCC
C       C DETERMINE THE NUMBER OF DAYS IN THE MONTH
C       CCCCC
200     NUMDAY = MONTBL(SMONTH)

C       CCCCC
C       C NOW COMPUTE THE TOTAL NUMBER OF AVAILABLE HOURS
C       C IN THE MONTH
C       CCCCC
210     AVHRS = NUMDAY*24*TOTNOD
        AVNHRS = NUMDAY*24.0

C       CCCCC
C       C OPEN A FLAT FILE WHICH WILL CONTAIN ALL RECORDS FOR
C       C THE SPECIFIED MONTH.  RECORDS FROM EACH
C       C DATA BASE WILL BE APPENDED TO THIS FILE (IF THERE
C       C ARE ANY IN THE DATABASE FOR THE SPECIFIED MONTH).
C       CCCCC
220     OPEN(22,'AVAIL.DMI',OUTPUT,ERR=920)

C       CCCCC
C       C LOOP THROUGH ALL OF THE DATA BASE FILES
C       CCCCC
250     DO 310 I = 1, NUMDB

C       CCCCC
C       C OPEN THE CURRENT DATA BASE
C       CCCCC
        DO 260 II = 1,5
                CURDB(II)=DBASE(I,II)
260     CONTINUE
        CALL DBOPEN(CURDB)

C       CCCCC
C       C SELECT ONLY THOSE RECORDS IN THE TYMNET NETWORK,
C       C WITH SEVERITY OF ONE AND WHOSE CLOSE OUT CODE
C       C DOES NOT CONTAIN "PROJ" OR "CUST. IND."
C       CCCCC
265     CALL DBFIND('ALL')
        CALL DBEXEC('LET SYSCASE = 1')
        CALL DBSRCH('NET','CT','TYMNET','AND','SVER','EQ',1,'AND',
     +          'COC','NCT','ANALOG','AND','COC','NCT','CUST. IND.',
     +          'AND','COC','NCT','CFG GL EXC','AND','COC','NCT',
     +          'CUST. SITE','AND','COC','NCT','DGTL MODEM','AND',
     +          'COC','NCT','DIGITAL','AND','COC','NCT','IRC/PTT',
     +          'AND','COC','NCT','SS 800/950','AND','COC','NCT',
     +          'SYSNC MODEM','AND','COC','NCT','T-1')
        ENCODE(66,270,DUPCMD)SDATE,EDATE
270     FORMAT('SEARCH LAST AND DUP BETWEEN INT("',2A5,'") INT("',
     +          2A5,'")')
        CALL DBEXEC(DUPCMD)
C       CCCCC
C       C IF THERE WAS A HOST FILE SPECIFIED, THEN SELECT
C       C RECORDS FOR JUST THE HOSTS IN THE FILE.
C       CCCCC
        GOTO 275
        IF ( HSTNAM(1) .EQ. '     ' ) GOTO 275
        ENCODE(50,271,HSTCMD)HSTNAM
271     FORMAT('SEARCH LAST AND HOST EQ @',5A5)
        CALL DBEXEC(HSTCMD)
275     CALL DBSRCH('LAST','AND','ELM','GE',0)
        CALL DBNREC(IREC)

        TYPE 276,(CURDB(II),II=1,5),IREC
276     FORMAT(/,1X,'DATABASE: ',5A5,1X,'RECORDS SELECTED: ',I6,/)

C       CCCCC
C       C LOOP THROUGH ALL RECORDS SELECTED
C       CCCCC
280     CALL DBGREC($300)
        CALL DBVAL('ELM',ELM,'TNUM',ITCKT,'NODE',INODE,'CNAM',CNAM,
     +          'PROD',PROD,'COC',COC)

C       CCCCC
C       C DETERMINE THE DOWN TIME IN HOURS FOR THIS RECORD.
C       CCCCC
285     ELH = 0.0
        IF ( ELM.EQ.0 ) GOTO 290
        ELH = ELM/60.

C       CCCCC
C       C  WRITE THE RECORD TO A FLAT FILE.
C       CCCCC
290     WRITE(22,295)ITCKT,INODE,ELH,CURDB,CNAM,PROD,COC
295     FORMAT(I8,1X,I6,1X,F10.3,1X,5A5,1X,3A5,1X,A5,1X,2A5)

C       CCCCC
C       C READ THE NEXT RECORD.
C       CCCCC
        GOTO 280

C       CCCCC
C       C CLOSE THIS DATA BASE AND GO PROCESS THE NEXT
C       CCCCC
300     CALL DBCLOSE
310     CONTINUE

C       CCCCC
C       C FINISHED WITH ALL OF THE DATA BASES.  CLOSE THE
C       C FLAT FILE AND LOAD IT INTO 1022.
C       CCCCC
320     CLOSE(22)
        CALL DBEXEC('LOAD AVAIL')

C       CCCCC
C       C SORT THE MONTHLY DATA BASE BY NODE NUMBER
C       C THEN LOOP THROUGH THE DATA BASE CREATING A NEW
C       C FLAT FILE WHICH CONTAINS ONLY ONE RECORD
C       C PER NODE.
C       CCCCC

        CALL DBOPEN('AVAIL')
        CALL DBFIND('ALL')
        CALL DBEXEC('SORT KEY NODE')

C       CCCCC
C       C OPEN THE FLAT FILE TO CONTAIN ONE RECORD PER NODE.
C       CCCCC
        OPEN(22,'AVAILN.DMI',OUTPUT,ERR=930)

        TOTELH = 0
        FIRST = 0
330     CALL DBGREC($350)
        CALL DBVAL('NODE',INODE,'ELH',ELH)
        IF ( FIRST .NE. 0 ) GOTO 335
                CNODE = INODE
                FIRST = 1

335     IF ( INODE.NE.CNODE ) GOTO 340
                TOTELH = TOTELH + ELH
                GOTO 330

C       CCCCC
C       C THE NODE HAS CHANGED. OUTPUT A RECORD TO THE FLAT FILE.
C       CCCCC
340     WRITE(22,341)CNODE,TOTELH
341     FORMAT(I8,1X,F20.3)
        CNODE = INODE
        TOTELH = ELH
        NUMNOD = NUMNOD+1
        GOTO 330

350     CALL DBCLOSE
        CLOSE(22)
        CALL DBEXEC('LOAD AVAILN')
        CALL DBOPEN('AVAILN')
        CALL DBFIND('ALL')
        CALL DBEXEC('SORT KEY ELH')

C       CCCC
C       C DETERMINE HOW MANY NODES ARE IN 1 PERCENT OF
C       C ALL NODES
C       CCCCC
355     ONEPC = TOTNOD/100
        PCREC(1) = PCTILE(1)*ONEPC
        PCREC(2) = PCTILE(2)*ONEPC
        PCREC(3) = PCTILE(3)*ONEPC

        NOOUT = TOTNOD - NUMNOD
        DO 360 I = 1,3
        RECNO = PCREC(I) - NOOUT
        IF ( RECNO.LT.0 ) GOTO 357
        CALL DBGREC($362,RECNO)
        CALL DBVAL('ELH',ELH)
        PCAVAL(I) = (1.0 - ELH/AVNHRS)*100.0
        GOTO 360

357     PCAVAL(I) = 100.0
360     CONTINUE
        GOTO 365

362     TYPE 364,RECNO
364     FORMAT(1X,'ERROR. UNABLE TO FIND RECORD NUMBER: ',I6)
        GOTO 999


C       CCCCC
C       C LOOP THROUGH THE RECORDS IN THIS DATA BASE
C       C PUTTING THEM INTO THE APPROPRIATE RANGES FOR
C       C THE AVAILABILITY DISTRIBUTION
C       CCCCC
365     CALL DBEXEC('STARTREC')
366     CALL DBGREC($390)
        CALL DBVAL('ELH',ELH)
        UPTIME = AVNHRS - ELH
        CALL ROUND2(UPTIME)

C       CCCCC
C       C IF THE UPTIME IS NEGATIVE THEN THIS MEANS THE NODE
C       C HAS BEEN DOWN OVER A MONTH.  PLACE IT INTO THE 0
C       C AVAILABILITY RANGE, BUT KEEP TRACK OF HOW MANY
C       C HOURS DOWN TIME IT REALLY HAD.
C       CCCCC
        IF ( UPTIME.GE.0 ) GOTO 369
                NEGELH = NEGELH+ELH
                NEGCNT = NEGCNT+1
                UPTIME = 0

369             DO 367 RANGE = 1,NUMRNG
                        IF ( UPTIME.GE.RANGES(RANGE,1).AND.
     +                       UPTIME.LE.RANGES(RANGE,2) ) GOTO 370
367             CONTINUE

C       CCCCC
C       C ERROR. DID NOT FIND A RANGE.
C       CCCCC
        TYPE 368,UPTIME
368     FORMAT (1X,'ERROR. UNABLE TO FIND RANGE FOR HOURS: ',F8.2)
        GOTO 999

C       CCCCC
C       C FOUND THE RANGE. INCREMENT THE APPROPRIATE VARIABLES.
C       CCCCC
370     RCOUNT(RANGE) = RCOUNT(RANGE)+1
        RAVAIL(RANGE) = RAVAIL(RANGE)+UPTIME
        TAVAIL = TAVAIL + UPTIME
        GOTO 366
390     CALL DBCLOSE

C       CCCCC
C       C PLACE ALL NODES WITH NO DOWNTIME INTO THE 100% AVAILABILITY
C       C RANGE.  THIS IS DETERMINED BY THE MAX NUMBER OF POSSIBLE
C       C UP HOURS IN THE MONTH.
C       CCCCC
395     DO 400 RANGE = 1,NUMRNG
                IF (AVNHRS.GE.RANGES(RANGE,1).AND.
     +                  AVNHRS.LE.RANGES(RANGE,2)) GOTO 410
400     CONTINUE

C       CCCCC
C       ERROR. DID NOT FIND A RANGE
C       CCCCC
        TYPE 405,AVNHRS
405     FORMAT (1X,'ERROR. UNABLE TO FIND RANGE FOR HOURS: ',F8.2)
        GOTO 999

C       CCCCC
C       C FOUND THE RANGE. INCREMENT THE APPROPRIATE VARIABLES.
C       CCCCC
410     RCOUNT(RANGE) = RCOUNT(RANGE)+NOOUT
        RAVAIL(RANGE) = RAVAIL(RANGE)+(NOOUT*AVNHRS)
        TAVAIL = TAVAIL + (NOOUT*AVNHRS)

C       CCCCC
C       C CALCULATE THE FREQUENCY THAT EACH RANGE OCURRED AND THE
C       C MEAN AVAILABLE HOURS FOR EACH RANGE.
C       CCCCC
420     DO 430 RANGE = 1,NUMRNG
          IF (RCOUNT(RANGE).EQ.0) GOTO 422
                RFREQ(RANGE) = COMFRQ + (100. *
     +            ((1.*RAVAIL(RANGE)) / (1.*TAVAIL)))
                COMFRQ = RFREQ(RANGE)
                GOTO 425

C       CCCCC
C       C THERE WERE NO NODES IN THIS RANGE.  THEREFORE, THE
C       C FREQUENCY WILL BE THE SAME AS FOR THE PREVIOUS
C       C RANGE, UNLESS THIS IS THE FIRST RANGE.  IF THIS IS THE
C       C FIRST RANGE, THE CUMULATEIVE FREQ WILL BE ZERO.
C       CCCCC
422     IF ( RANGE.NE.1)
     +       RFREQ(RANGE) = RFREQ(RANGE-1)

C       CCCCC
C       C DETERMINE THE MEAN HOURS OF AVAILABILTY FOR THE RANGE.
C       CCCCC
425     IF (RAVAIL(RANGE).NE.0)
     +          RMEAN(RANGE) = RAVAIL(RANGE) / ( 1.*RCOUNT(RANGE) )

430     CONTINUE

C       CCCCC
C        CALCULATE THE MEAN AVAILABLE HOURS
C       CCCCC
435     AVGAV = ( (1.*TAVAIL) / (1.*TOTNOD) )
        AVGPC = (AVGAV/AVNHRS)*100.


C       CCCCC
C       C NOW IT IS TIME TO COMPUTE THE STANDARD DEVIATION.  TO
C       C TO THIS IT IS NECESSAYR TO GO THROUGH THE NODE
C       C INFORMATION ONE MORE TIME.
C       CCCCC
500     CALL DBOPEN('AVAILN')
        CALL DBFIND('ALL')
505     CALL DBGREC($600)
                CALL DBVAL('ELH',ELH)
                UPTIME = AVNHRS - ELH
                
C               CCCCC
C               C DETERMINE THE DEVIATION OF THIS AVAILABLE HOURS
C               C FROM THE MEAN AVAILABLE HOURS.
C               CCCCC
                DEV = AVGAV - UPTIME

C               CCCCC
C               C NOW SQUARE THIS DEVIATION TO NULLIFY THE EFFECT OF 
C               C A POSSIBLE NEGATIVE DEVIATION.
C               CCCCC
                DEVSQ = DEV**2

C               CCCCC
C               C SUM ALL OF THE DEVIATIONS
C               CCCCC
                SUMDEV = SUMDEV + DEVSQ

        GOTO 505

C       CCCCC
C       C FINISHED WITH THE DEVIATIONS.  CLOSE THE DATA BASE.
C       C THEN DIVIDE THE SUM OF THE DEVIATIONS BY THE NUMBER OF
C       C NODES IN THE NETWORK TO GET THE MEAN DEVIATION.
C       CCCCC
600     SUMDEV = SUMDEV/TOTNOD

C       CCCCC
C       C FINALLY, TAKE THE SQUARE ROOT OF THE ABOVE NUMBER TO GET
C       C THE STANDARD DEVIATION.
C       CCCCC
        SD = SQRT(SUMDEV)


C       CCCCC
C       C FIND THE WORST 10 ELM'S FROM THE AVAIL DATA BASE.
C       CCCCC
700     CALL DBOPEN('AVAIL')
        CALL DBFIND('ALL')
        CALL DBEXEC('SORT ELH DESC')
        ICOUNT = 1
710     CALL DBGREC($999)
        CALL DBVAL('TCKT',ITCKT,'ELH',ELH,'DB',CURDB,'CNAM',CNAM,
     +                  'PROD',PROD,'COC',COC)
        WORSTT(ICOUNT) = ITCKT
        WORSTE(ICOUNT)= ELH
        DO 715 J = 1,5
                WORSTD(ICOUNT,J) = CURDB(J)
715     CONTINUE

        
        DO 716 J = 1,3
                WORSTC(ICOUNT,J) = CNAM(J)
716     CONTINUE

        DO 717 J = 1,2
                WORSTO(ICOUNT,J) = COC(J)
717     CONTINUE

        WORSTP = PROD

        ICOUNT = ICOUNT +1
        IF (ICOUNT .GT. 10 ) GOTO 720
        GOTO 710

720     CALL DBCLOSE


C       CCCCC
C       C OUTPUT THE REPORT
C       CCCCC
800     IF ( SMONTH.GT.9 ) GOTO 803
                ENCODE(9,802,OUTNAM)SYEAR,SMONTH
802     FORMAT('AV',I4,'.',I1)
        GOTO 805

803     ENCODE(10,804,OUTNAM)SYEAR,SMONTH
804     FORMAT('AV',I4,'.H',I2)

805     CALL DATE(IDATE)
        OPEN(22,OUTNAM,OUTPUT,ERR=940)
        WRITE(22,801)SDATE,EDATE
801     FORMAT(////,30X,'NETWORK AVAILABILITY',/,29X,2A5,' - ',2A5)
        WRITE(22,811)(IDATE(I),I=1,2)
811     FORMAT(/,30X,'REPORT DATE: ',2A5)
        WRITE(22,810)TOTNOD
810     FORMAT(/,20X,'TOTAL NUMBER OF NODES IN NETWORK: ',I6)
        WRITE(22,808)PCAVAL(1)
808     FORMAT(//,22X,'90TH PERCENTILE: ',F8.2,' % AVAILABILITY')
        WRITE(22,806)PCAVAL(2)
806     FORMAT(/,22X,'95TH PERCENTILE: ',F8.2,' % AVAILABILITY')
        WRITE(22,807)PCAVAL(3)
807     FORMAT(/,22X,'99TH PERCENTILE: ',F8.2,' % AVAILABILITY')


        WRITE(22,812)AVNHRS
812     FORMAT(/,15X,'NUMBER OF POSSIBLE AVAILABLE ',
     +     'HOURS PER NODE: ',F7.0)
        WRITE(22,814)AVGAV,AVGPC
814     FORMAT(/,13X,'AVERAGE AVAILABLE HOURS PER NODE: ',F8.2,
     +        '   = ',F6.2,' %')
        WRITE(22,816)SD
816     FORMAT(/,23X,'STANDARD DEVIATION: ',F8.2,' HOURS')

        WRITE(22,818)
818     FORMAT(//,15X,'DISTRIBUTION BY HOURS OF AVAILABILITY',
     +     ' DURING MONTH',
     +     /,15X,'--------------------------------------------------',
     +     //,37X,'CUMULATIVE % OF ALL',13X,'MEAN',/,
     +     2X,'RANGE OF HOURS',2X,'# NODES IN RANGE',
     +     3X,'OBSERVED AVAILABLE HOURS',2X,
     +     'HOURS AVAILABLE',/,1X,16('-'),2X,16('-'),2X,24('-'),
     +     2X,15('-'),/)
        DO 830 I = 1,NUMRNG
        WRITE(22,825)RANGES(I,1),RANGES(I,2),RCOUNT(I),RFREQ(I),
     +          RMEAN(I)
825     FORMAT(1X,F6.2,' - ',F6.2,9X,I6,16X,F6.2,12X,F10.2)
830     CONTINUE

        WRITE(22,832)TOTNOD
832     FORMAT(19X,'------------',/,
     +         25X,I6)

        WRITE(22,850)
850     FORMAT(///,23X,'10 WORST TICKETS BY ELASPED HOURS',/)
        WRITE(22,852)
852     FORMAT(2X,'TICKET',1X,'ELASPED HRS',1X,'DATA BASE',
     +          17X,'CUSTOMER NAME',3X,'CLOSE OUT',2X,'PROD',/,
     +          '--------',1X,11('-'),1X,25('-'),
     +          1X,15('-'),1X,10('-'),1X,5('-'),/)


        DO 860 I = 1,10
        WRITE(22,855)WORSTT(I),WORSTE(I),(WORSTD(I,J),J=1,5),
     +          (WORSTC(I,J),J=1,3),(WORSTO(I,J),J=1,2),WORSTP
855     FORMAT(I8,2X,F10.2,1X,5A5,1X,3A5,1X,2A5,1X,A5)
860     CONTINUE
        CLOSE(22)
        GOTO 999

900     TYPE 905,SMONTH,SYEAR
905     FORMAT(1X,'ERROR NO REC IN HSTMNT FOR: ',I2,1X,I4)
        GOTO 999

910     TYPE 915
915     FORMAT(1X,'ERROR. UNABLE TO OPEN FILE: AVAIL.DBS')
        GOTO 999

920     TYPE 925
925     FORMAT(1X,'ERROR. UNABLE TO OPEN FILE: AVAIL.DMI')
        GOTO 999

930     TYPE 935
935     FORMAT(1X,'ERROR. UNABLE TO OPEN FILE: AVAILN.DMI')
        GOTO 999

940     TYPE 945,OUTNAM
945     FORMAT(1X,'ERROR. UNABLE TO OPEN FILE: ',2A5,/)
        GOTO 999
999     CALL DBEND
        END


        SUBROUTINE ROUND2(NUMBER)


        REAL NUMBER

        INUM = NUMBER*1000
        INUM2 = NUMBER*100

        XMNUM = MOD(INUM,10)
        IF (XMNUM.GE.5) INUM2 = INUM2 + 1
        NUMBER = INUM2/100.

        RETURN
