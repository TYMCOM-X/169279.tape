PATCH(850515,1400,JL,PA0PTR,,440)
NDSPID   BS        400                :SAVED SPID, 4 BYTES FOR EACH DPORT
CADDR    BS        40                 :TEMP. STORAGE FOR ASSEMBLED CLD. ADDR.
CONPATCH(ESP900+80,,6)
         J         PA1PTR,,
CONPATCH(ESP900+94,,6)
         J         ESP92A,,
CONPATCH(NST128+0E,,6)
         J         NST127,,
   :
   :   THIS PATCH WAS WRITTEN TO PROVIDE A SPECIAL FEATURE FOR SW BELL, TO
   :   ALLOW THEM TO PLACE CALLS ACROSS A GATEWAY FROM A TERMINAL USING THE
   :   TKSUP OPTION AND ALSO USING A SUBPROCESS ID.  IF A CALL IS PLACED FROM
   :   A NON-PACKET MODE DTE (A NON-X25 INTELLIGENT TERMINAL, FOR EXAMPLE),
   :   ACROSS A GATEWAY, A CALLED ADDRESS MUST BE CREATED FOR THE CALL
   :   REQUEST PACKET.  WHEN THE TKSUP OPTION IS USED, THE CALLED ADDRESS
   :   THAT IS CREATED FOR USE IN THE CALL REQUEST PACKET IS 3106 BY
   :   CONVENTION.  A CALL COMING ACROSS THE GATEWAY, AS IN A PRIVATE NETWORK,
   :   AND GOING TO A CUSTOMER'S HOST, DOES NOT WANT TO SEE 3106 AS CALLED
   :   ADDRESS.  THAT IS THE PROBLEM.
   :   FOR SW BELL, THE PATCH ADOPTS THE FOLLOWING ALGORITHM FOR CREATING
   :   THE CALLED ADDRESS:
   :    1. IF THE CALL ORIGINATES FROM A PACKET-MODE DTE (AS A PAD), THEN
   :       THE PAD SUPPLIES A CALLED ADDRESS IN ITS CALL REQUEST PACKET TO
   :       US, AND WE SIMPLY USE THAT.
   :    2. IF THE CALL IS FROM A NON PACKET MODE DTE, THEN:
   :       - IF TKSUP IS SET, THE BEGINNING DIGITS (DNIC AND HOST NUMBER)
   :         ARE TAKEN FROM THE CLDADR MACRO AS GENNED IN THE TYMFILE.
   :         THE SUBPROCESS ID IS TAKEN FROM THE LAST TWO DIGITS OF THE
   :         USERNAME AS FOUND IN THE USERNAME FIELD OF THE NEEDLE.
   :       - IF TKSUP IS NOT SET, THEN THE CALL REQUEST PACKET WILL HAVE
   :         ALREADY BEEN FORMATTED BY THE ORIGINATING INTERFACE ON THE
   :         OTHER SIDE OF THE GATEWAY.
   :
   :
CONPATCH(PA1PTR,,106)
         LIS       R7,0
         LB        R0,PFXCLL,,       :CALLING ADDRESS LENGTH
         LB        R8,PFXCLD,,       :PICK UP CALLED ADDR. LENGTH
         CLHI      R8,4              :IS IT 4 DIGITS LONG?
         JN        ESP900+88,,       :NO, JUST TREAT AS NORMAL PAD CALL
         LIS       R7,1              :FLAG AS CALLED ADDRESS MODIFICATION
         LR        R8,RL             :LINK NUMBER IN R8
         SLHLS     R8,CLD.SC         :FORM THE INDEX INTO ARRAY
         LB        R8,CLD.LT,R8,     :GET LENGTH OF CALLED ADDRESS
         J         ESP900+88,,       :AND RETURN
ESP92A   LR        R7,R7              :SEE IF CALL FROM PAD OR FROM HOST
         JE        ESP92H             :NO, JUST NORMAL CALL FROM PAD
         LR        R7,R8              :GET LENGTH IN R7
         SIS       R7,2               :ADJUST FOR 2-DIGIT SPID
         LIS       R5,1               :POINTER INTO CLDADR STRING
ESP92C   CLHI      R7,1               :ONLY 1 DIGIT LEFT?
         JE        ESP92D             :YES, IT'S AN ODD NUMBER
         LR        R7,R7              :NO DIGITS LEFT?
         JE        ESP92E             :YES, EVEN NUMBER
         LB        R4,CLD.LT,R5,      :PICK UP NEXT DIGIT
         STB       R4,CADDR,R5,       :AND STORE IN INTERMEDIATE BUFFER
         AIS       R5,1
         SIS       R7,2               :DECREMENT REMAINING DIGITS COUNT
         J         ESP92C             :CONTINUE WITH THE MOVEMENT OF DIGITS
ESP92D   LH        R7,DPORT,,         :DPORT INDEX INTO SPID BUFFER
         SLLS      R7,2               :4 BYTES ALLOCATED PER DPORT
         LB        R0,NDSPID,R7,      :PICK UP FIRST BYTE OF SAVED SPID
         SLLS      R4,4           :LAST DIGIT, SHIFT INTO LEFT NIBBLE
         OR        R4,R0              :COMBINE WITH SPID DIGIT
         STB       R4,CADDR,R5,       :AND STORE IN BUFFER AREA
         AIS       R5,1               :BUMP POINTER INTO CADDR ARRAY
         AIS       R7,1               :BUMP INDEX INTO SPID AREA
         JAL       R9,ESP92G,,        :GET NEXT TWO SPID DIGITS
         JAL       R9,ESP92G,,        :AND ANOTHER TWO
         J         ESP92F
ESP92E   LH        R7,DPORT,,
         SLLS      R7,2               :FORM INDEX INTO SPID ARRAY
         LB        R4,NDSPID,R7,  
         SLLS      R4,4               :COMBINE BYTE 3 OF SPID WITH 0
         AIS       R7,1
         LB        R0,NDSPID,R7,      :LAST SPID BYTE
         OR        R4,R0
         STB       R4,CADDR,R5,       :AND STORE AWAY
ESP92F   LIS       R6,1
         LA        R9,CADDR,,         :SET UP FOR DIGIT MOVE
         J         ESP900+9A,,        :INITIALIZE R6 INDEX AND RETURN NORMAL
ESP92G   LB        R4,NDSPID,R7,      :GET NEXT SPID DIGIT
         SLLS      R4,4               :SHIFT OVER FOUR BYTES
         AIS       R7,1               :BUMP POINTER INTO SPID ARRAY
         LB        R0,NDSPID,R7,      :AND GET THE NEXT SPID DIGIT
         OR        R4,R0              :COMBINE THE TWO SPID DIGITS
         STB       R4,CADDR,R5,       :STORE THE COMBINED SPID DIGITS
         AIS       R7,1
         AIS       R5,1
         JR        R9
ESP92H   LIS       R6,1               :SET INDEX TO JUMP PAST LENGTH
         LA        R9,PFXCLD,,        :POINT AT ADDRESS BUFFER
         J         ESP900+9A,,        :AND GO BACK TO NORMAL CODE FLOW
NST127   CLHI      R0,39              :SEE IF A NUMERIC CHARACTER
         JG        NST130,,           :NON-NUMERIC, NO NEED TO STAY HERE
         LHL       R1,DPORT,,
         SLLS      R1,2               :MULT. DPORT BY 4, GET INDEX INTO
         LIS       R4,1               :SPID TABLE
         SR        R4,R9              :PINPOINT INTO SPID TABLE
         LR        R7,R0              :SAVE NUMERIC BYTE
         SHI       R7,30              :CONVERT FROM ASCII TO BINARY
         STB       R7,NDSPID,R1,R4    :AND SAVE IN THE SPID TABLE
         J         NST140,,           :RETURN
ENDPATCH(REPLACES 3106 WITH CLDADR DATA FROM GATEWAY TO HOST)
